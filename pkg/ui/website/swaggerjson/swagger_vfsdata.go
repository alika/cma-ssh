// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Swagger statically implements the virtual filesystem provided to vfsgen.
var Swagger = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 12, 12, 23, 58, 5, 76182838, time.UTC),
		},
		"/api.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "api.swagger.json",
			modTime:          time.Date(2018, 12, 14, 0, 28, 44, 299485885, time.UTC),
			uncompressedSize: 15071,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x73\xdb\xb8\x11\x7f\xf7\x5f\xb1\xc3\x76\xa6\x2f\x89\x95\xbb\xbe\x74\xdc\x87\xd6\x63\xbb\x89\xe6\xe2\x8f\xb1\x9c\xcb\x43\x93\xd1\xac\xc8\x15\x89\x88\x04\x18\x2c\x28\x55\xd3\xf1\xff\xde\x01\x08\x5a\x24\x45\x4a\xb2\x14\x5f\x94\xbb\xde\xcb\x45\x04\xb0\xd8\x8f\x1f\xf6\x0b\xf0\x7f\x4f\x00\x02\x5e\x60\x1c\x93\x0e\xce\x20\xf8\xf9\xf4\x4d\xf0\xca\x7e\x13\x72\xaa\x82\x33\xb0\xe3\x00\x81\x11\x26\x25\x3b\x7e\x91\x16\x6c\x48\xc3\x35\x4a\x8c\x49\xc3\xf9\xdd\x10\x46\xa3\x77\x90\x6b\x35\x17\x11\x69\xb7\x18\x20\x98\x93\x66\xa1\xa4\x5d\x32\x7f\x73\xfa\x93\xa7\x0a\x10\x84\x4a\x1a\x0c\xcd\x13\x69\x80\x40\x62\xe6\x68\x5f\xa3\x46\x03\x6f\x51\xe3\xb4\x30\x91\x90\x6a\xee\x17\x01\x04\x85\x4e\xed\x94\xc4\x98\x9c\xcf\x06\x83\x58\x98\xa4\x98\x9c\x86\x2a\x1b\x30\x66\x5c\xc8\xf8\x75\x28\x43\x33\x08\x33\x7c\xcd\x9c\xac\xd6\x51\x86\xc2\xad\xcc\x2c\x71\x25\xa2\x7f\xc6\xf6\x8b\x5d\x19\xb8\x39\x8f\x27\x00\x8f\x4e\x62\x0e\x13\xca\x88\x83\x33\xf8\x77\xc9\xaa\xdb\xac\xe2\xdb\xfe\xb0\x2b\x3e\xbb\xb9\xa1\x92\x5c\x34\x26\x63\x9e\xa7\x22\x44\x23\x94\x1c\x7c\x61\x25\x57\x73\x73\xad\xa2\x22\xdc\x71\x2e\x9a\x84\x57\x6a\x1f\x60\x2e\x06\xf3\x9f\x06\x61\xa9\xf5\xba\xd2\x62\xaa\xeb\xd0\xb2\x5f\x64\x19\xea\xa5\x95\xf5\xa3\x48\x53\xd0\x64\xb4\xa0\x39\x81\x49\x08\xd8\xa0\x29\x18\xd4\x14\x10\x3c\x31\x40\x19\x81\x30\x0c\xb3\x62\x42\xa1\x92\x53\x11\xc3\x54\x69\x08\x95\x94\x14\x1a\x31\x17\x66\xf9\xa4\x47\x80\x40\xe5\xa4\x1d\xcb\xc3\xc8\xee\xf1\x96\x8c\xc7\x42\x7d\x92\x26\xce\x95\x64\xe2\x06\x6f\x00\xc1\xcf\x6f\xde\xb4\x3e\x01\x04\x11\x71\xa8\x45\x6e\x3c\x50\x6a\x84\x4a\x89\xac\x41\x70\x6d\x19\x40\xf0\x67\x4d\x53\xbb\xe2\x4f\x83\x88\xa6\x42\x0a\x4b\x81\xad\xf1\x99\x93\x15\x63\xf7\x94\xa7\xcb\xa0\xb1\xf6\xf1\xa4\xeb\xdf\x8f\x35\x09\x72\xd4\x98\x91\x21\xbd\xb2\x57\xf9\x5f\x8b\xf7\x0a\xb4\xee\xff\xaf\x36\xca\x75\x83\x19\x59\xd5\x5b\x43\x54\xca\x37\x0a\x26\x04\xa9\x52\x33\x8a\xa0\xc8\x4f\xdb\x24\x84\x5b\xf9\xb5\x20\xbd\x6c\x0f\x69\xfa\x5a\x08\x4d\xd6\x0a\x53\x4c\x99\x5a\xc3\x66\x99\x3b\xc6\xd8\x68\x21\xe3\xa0\x53\xe0\xcf\x35\x81\x0d\xc6\x6d\x51\xab\x53\xbe\x5a\xfc\xf9\xa4\xa5\xa9\x20\xa2\x94\x0c\x6d\x86\x60\x39\x67\x05\xb9\x0d\x70\xba\x74\x53\x8f\x13\x51\x0d\xde\x8e\x05\x54\x1f\x13\x34\x20\xb8\x0e\xaa\xbf\x30\xd8\x85\x16\x5b\x11\xb1\xd1\x6a\xf9\xe3\xc1\x2a\x57\xbc\xc5\xaf\xb9\x48\x63\x63\xcb\x4e\xb8\xba\xd0\x84\xc7\x8a\xab\x06\x6f\xbf\x09\xae\x26\x2a\x5a\xb3\x7b\x09\x89\xae\x91\x1a\x22\x8c\x2e\xda\x80\xf8\x06\x32\x5f\x73\xbc\x8b\xc4\xdf\x02\x56\xc5\x16\x54\x61\xf4\xa5\x60\x03\xf8\x4c\x78\x9d\xbb\x65\x9e\x81\x1b\x15\x11\x1f\x19\xc6\x1a\x0c\xfe\x41\x30\xd6\x90\xf9\xc5\x31\x76\x52\x53\x58\x3b\x61\x1b\xa4\xa2\xe1\xce\x9e\x91\xb5\x21\xd8\xb5\x36\x6d\xf0\xb4\x78\xa7\x64\xec\xbd\xdd\xf0\xb8\x20\xd8\x64\x6e\x2f\x0c\x7e\x43\x8b\x14\x79\xac\x31\xa2\xe7\x1a\xa5\xd0\x12\xfc\x52\x50\x4e\x41\xec\xb2\x65\x84\x58\xcc\x49\xee\xe0\x2a\xde\x92\xf9\x50\x12\xf0\x9c\x0f\xe5\x54\xe9\xcc\xcd\x38\x3e\x8b\xf5\xb2\x7a\xc4\xf9\x0f\x18\xfb\x6d\x41\x80\x9a\x6c\x19\xc3\xb6\x20\x15\xb2\x2c\x6b\xbc\xf1\x7e\xc0\x8c\x68\x6b\xe8\x32\x86\xb2\xdc\xd8\xb4\xaf\x42\xe8\x2e\xa1\xab\x69\xe1\x23\x43\x60\x93\xb9\x3f\x48\xdc\x6a\x0a\xfd\x7d\x02\xd7\xaa\x6f\xf3\x6c\xf7\xe8\x97\x82\x58\x39\x0b\xc0\x89\x2a\x0c\x60\x2e\x80\x49\xcf\xb7\xf9\xc7\x5f\x4b\x0a\x47\xed\x18\x3d\x8f\xbf\x59\x18\x7b\x6a\x4f\xd5\xb8\x59\x35\x88\xda\xa9\xce\x88\x93\x7b\xca\xd4\x9c\xae\x31\x4c\x84\xa4\x51\x4e\x61\xdd\x96\x95\xcf\x52\x93\x2f\x14\xae\x12\x85\x20\xd7\xd6\x1a\x46\xb4\x94\x1b\x24\xed\x72\x6c\xdd\xef\xbd\x6a\x8c\x55\x7d\xc2\x87\x84\xc0\x2e\x76\xbe\x77\x34\x7a\x07\x18\x86\xc4\xbc\x12\xf3\xb1\x13\x86\x2d\x05\x77\x00\xe2\x00\x61\x62\x61\xc6\xeb\xf8\x7e\x9e\x4c\x06\x63\x50\xd2\x45\x9d\x58\x18\xd0\x94\x2b\x16\x46\xe9\x1a\x16\xea\x16\xb7\x5b\x86\x2a\xcb\xc4\x01\x5a\x44\x4e\xaa\xee\x91\xdd\xd2\x93\xeb\xdd\xce\x68\xa2\x31\x1b\x6c\x35\x67\x76\xdd\xf2\x63\x42\x26\x21\x0d\x4a\x83\x54\xc6\xed\x6a\x29\xc2\x02\x19\xc2\x94\x50\xc2\x22\x21\x09\x93\x42\xa4\x3d\x4c\xd8\xa1\x68\x1c\xed\xcb\xc0\x25\x1a\xd7\x2d\x73\x64\x7a\xc4\x54\x07\xd9\xd1\xa3\xca\x6e\x12\x2b\x28\x98\x22\x1b\x3b\x43\x95\xe5\x22\xa5\xee\x1d\xfd\xa0\xde\x6b\xbf\x0b\xbf\xd8\x6d\xd5\x4d\x3f\x4f\xd1\x58\x8c\xef\x45\xff\xce\x2f\x06\x61\x4a\x33\x95\xfb\x45\xee\xec\x0d\x40\x17\x52\xda\x2c\xa8\xec\x33\xfb\xbd\x3b\x4f\x5f\x4f\xf9\x74\xc0\x91\xf3\xc1\x75\x1f\x18\xee\x95\xde\x75\x6b\x17\xa3\x68\x2c\x5d\x71\xde\xc3\x0a\x6a\x8d\xcd\x10\x1f\x08\x43\x59\x7b\xfe\x96\xe8\x30\xe2\xa4\xee\x76\xeb\xe1\xa0\x5b\x48\x3f\x9b\x61\x91\x88\x30\xb1\xa2\x2d\x50\xba\x44\x0e\x23\x87\xc9\x9a\xf4\xdd\x92\x69\xe7\xec\x5f\x56\xb8\x9d\x62\xcc\x21\xc2\x96\x42\xc0\x54\xab\xac\x47\xe2\x5d\xd1\x5a\x46\xe5\x03\xf0\xaa\x66\x7d\x5a\x9c\x28\x65\xbd\x5f\x53\x8f\x65\x58\xea\x1d\x5e\xa1\x19\x2d\x92\x05\x03\x02\x17\x2e\x10\x4e\x0b\x9b\x37\x7d\x2d\x88\xcd\x6e\x72\x7a\x09\x2f\xc9\xa0\x48\x87\x86\xb2\x43\xc4\x14\xd1\x5e\x87\x72\x78\xd9\xba\xc6\xe8\x06\xe5\xde\x87\xbe\xe3\xa2\xa4\x7b\x87\xf2\x3a\x6b\x9c\x11\x33\xc6\xfb\xed\x75\x1e\x45\x0e\xdf\x98\x76\x24\xac\xcd\x2b\xb3\xad\xec\xac\x6e\xd0\x0e\xf6\x75\xb5\xcb\x38\x17\x93\xdc\x5d\xdc\x4e\xae\xa0\xe4\xb7\xcd\xc0\xc6\x5e\x6c\x49\x6e\x54\x2e\xec\xcf\x40\xb6\x69\x62\x3b\x6a\xff\x8f\xd7\xa3\xc2\xeb\x31\x43\x65\xd4\xe6\xad\x4f\x3d\x01\xc9\x22\x6b\x54\x53\xc1\xe8\xe1\xfc\xe1\xc3\x68\xfc\xe1\x66\x74\x77\x75\x31\xfc\xd7\xf0\xea\xb2\x5e\x3f\xde\xdd\xdf\xfe\x3a\x1c\x0d\x6f\x6f\x86\x37\x6f\xeb\xdf\xef\x3f\xdc\xac\x7d\xba\xba\xb8\xbd\xb9\x18\xbe\x6f\x7d\x1e\x3d\xdc\xde\xdd\xb5\xbe\x5d\xdd\xdf\xdf\xde\xd7\x3f\x5c\x5e\xbd\xbd\x3f\xbf\xbc\xba\xac\xa4\xfe\x5c\xbb\x32\x9d\x62\x91\xba\x70\xb1\x81\xd3\x95\x42\x5f\xc3\xfa\xb4\x33\xb8\x51\x06\x98\xcc\x27\x09\xaf\xa1\x2e\xd2\x19\x58\x03\xd4\xbf\x38\x6b\x10\x08\x19\x89\x10\x0d\x35\x93\x29\xc1\x30\x21\x9b\x3d\x85\xee\x46\x26\x3a\x75\x04\xbd\x2e\x4a\x5a\xfe\xc7\x46\x32\x09\x5a\x3a\x24\x2b\x32\xe5\xab\x02\x86\x69\x91\xa6\x4b\x28\x18\x27\x29\x79\xd2\x2b\x9d\x7a\xf2\xab\x0f\x1d\x5b\xa0\x01\x56\x19\xc1\x42\xe9\x99\x25\x88\xa1\x11\x73\x4a\x97\x9e\xeb\x48\x49\xaa\x0a\x31\xcf\xcb\x2b\x1b\x5b\x13\x40\xf6\xc9\xa0\x9d\x66\x87\x33\x74\x9c\xba\x82\x26\x22\x60\x35\x35\x0b\xd4\x9e\xab\xca\xa4\x25\x4b\xd5\xaf\xdd\x34\x57\x5e\x6f\x47\x8e\x8e\x83\x41\x49\xc4\xfd\x73\x23\x85\x0c\xad\x18\x50\xc8\x52\x3f\x8e\x40\x05\x9b\x92\x46\xf5\x6b\x23\x19\xdf\x83\x62\x5b\x57\x68\xa7\x20\xab\x10\x9b\x4f\xb1\x51\x9a\x9c\x0d\x60\x5a\xc8\xb0\xf4\x1b\xc2\xf8\x22\xb5\x75\xee\xda\x37\x72\xdf\x23\xdd\xef\x7f\x22\xf1\x74\x1f\xd7\x57\x3a\xcd\xfe\xc6\xfb\x54\x83\xad\xfe\x90\x55\xfa\x7c\x55\x17\xfe\x52\x4c\x48\x4b\xb2\x1a\xb7\xd5\x85\x05\x21\x95\xf8\xe1\x53\xb8\x50\xd2\x68\x95\x42\x9e\xa2\x7c\x5a\xc5\xae\x2c\x89\xc8\x90\xce\x84\xa4\x08\x26\x4b\x27\x4d\x2d\x49\x3e\xed\x16\x20\x11\x71\x32\xc6\x39\x8a\x14\x27\xc2\x59\xe9\x45\x52\xd0\xf5\xba\xbe\x06\xe8\x77\xe7\x3d\xa1\x91\x8c\x95\x7d\x3c\xc5\x89\x16\xe1\xde\x3d\x8c\x72\xb9\xb7\x68\x7f\x15\x1c\x96\x8a\x1d\x3b\xc5\xfe\x08\x15\x9b\xad\xb4\xb5\x60\xda\x1e\x72\x4b\x04\xfd\xbe\x64\xc2\x5c\x8c\x49\x46\xb9\x12\x72\xdf\xf6\x96\x60\xe0\x44\x15\x69\x64\x81\x81\x30\xc7\xb4\x20\x48\xc5\x8c\x40\xe4\x67\xb9\xd2\xc6\x17\xfd\x22\x4d\xfd\x0c\xa1\x4d\x81\x29\x0c\xef\x06\x76\xf8\x93\xbc\x43\x66\x7b\xda\x30\x9c\x59\x7c\xd1\x7f\x0c\x69\x9b\x24\x85\x05\x1b\x95\x91\x66\x8f\x3a\xeb\x68\x7d\x9b\x27\x2b\xa4\xf3\xa6\x3b\xa5\xd5\xb9\x16\x73\x34\x34\x9e\x51\xef\xb9\xdc\xdc\x9c\x29\xd7\xc3\x8c\x96\x4f\xad\x26\xe6\x04\x84\x34\x0a\x32\xaf\xfa\x1d\x33\xa4\xf5\xf7\x22\x47\x58\xea\xf6\xfb\x99\x05\x72\xdd\x9d\x97\x1e\x52\x70\x47\x1d\x5c\xf7\x09\x6b\x4f\x1f\xb7\x9e\x80\x7a\xd1\xd1\xef\x93\x22\x57\x49\xb7\x73\xd5\x8a\x19\xa8\x6e\x1b\x76\x33\x4d\xc7\x13\xb1\xe3\x33\xcd\x85\x3b\x68\x75\x61\x27\x54\xbd\x14\xeb\x73\xc9\xdd\xa5\xc2\x4e\xc8\x1f\x35\x6a\x81\x67\x35\x3b\xba\x9e\x0c\x1c\x9f\x3e\x87\xad\xbc\xb0\xcc\x46\x79\xc9\x16\x78\x9b\xc0\xfc\xc2\x11\xa0\x8e\xff\xed\xee\xff\x7d\xfb\x99\xc9\x33\x2d\xf4\xbb\xb3\xce\x1e\xae\xa6\xd6\x95\xdb\x55\x7b\x5b\x1e\x58\x1c\x9f\x3e\x2f\x50\xb6\x7d\x87\x6f\xba\xf7\xb8\x8e\x2a\x31\x3e\x1c\xec\x1b\x5e\x5a\x6c\xe8\xa8\x35\x12\xf3\x5c\x31\x0b\x9b\x02\x68\x11\x27\x06\xa4\x5a\xec\x6c\xa9\xc6\x8d\xef\xf1\xd9\x65\x38\x85\xa7\x9b\x74\x17\x62\x6f\x7f\xd9\x68\x8f\xb1\xe8\xbc\x4d\x85\x7e\xa8\x6f\xbf\x94\xdd\x7c\xcf\x56\x9f\xb9\xae\xf4\xf5\xbe\x87\xdb\xc5\xd5\x5d\x55\x45\xd6\x08\x1e\x4d\x03\xad\x2a\xb5\xf7\x38\xa1\xf4\xbb\x54\xaf\x36\x9d\x90\xbe\x82\x45\x48\x1d\x1f\xdd\x26\xb0\xf9\xed\xde\x5b\x94\xd9\x71\xe7\x1e\x1b\x10\xdc\xaa\x07\x0e\xd0\x4f\xc1\x36\xb5\x3e\x40\x47\x15\x81\xfe\x47\x01\xf5\xb2\xf8\xe5\x9e\x1e\xd4\xd3\x7b\xa5\x7b\x77\x11\xd2\x50\xdc\x78\xb3\xd2\x38\x96\x42\x9a\xbf\xfe\xbc\x81\x07\x57\xbe\xec\xc4\x03\x32\x2f\x94\x7e\x56\x8f\xbb\xa3\x7d\x51\x91\x69\xed\x79\x0a\xae\xcc\x12\xec\xf2\x71\x91\xe5\x29\x65\x24\x0d\x45\xb0\x10\x26\x11\x0d\xa7\x8e\xb9\xf8\x24\x27\x14\x62\xc1\xe4\x86\x55\x61\x60\x26\xd5\x42\x8e\x9d\x46\xb9\xc8\x9d\x54\x08\xd7\xc3\x87\x6b\x08\x51\x42\x4c\x65\x92\x5f\xed\x7e\x0a\xe7\xe5\xa0\xe0\x4f\x92\x8d\x7b\xa0\x66\xb3\xfe\x49\x4a\x99\xe3\xcc\x16\x42\x13\xb4\x95\x10\x16\x26\x21\x69\xfc\x5f\x42\xfd\x1d\x68\x4e\x12\x84\x4b\x17\x97\x10\x29\xc7\xaf\x27\xff\x49\xda\x65\x6e\xc0\x6e\x5a\xd2\x15\x59\x4e\x9a\x95\x74\xa5\x9c\x6b\xf4\x39\x98\x9f\xc2\xc3\xed\xe5\xed\xd9\x4a\xd4\x9a\x04\xdc\xd3\x83\x71\xe7\xe9\x85\xd3\xb2\xb6\xa7\xda\x1e\xc6\xac\x55\x4b\xce\x9c\xe6\x6a\x32\x76\x65\x69\xeb\x8e\xd4\x75\xe4\x73\x0a\xc5\xd4\xeb\xd8\x3f\x59\xad\xbe\xb9\x86\x56\x97\x53\x5d\x7f\x89\xf6\xc3\xbf\x01\x38\xe4\xc1\x48\x3d\x9d\x70\x3b\x2f\xa8\xde\x63\x56\xff\xd8\xcd\x13\x77\x3d\x6a\x3c\xbe\x7c\x62\xbf\xbb\xea\xa7\x67\x6a\x55\x03\xe6\x52\x85\xb5\x77\x6a\x2d\x77\x75\xad\x34\xf9\xab\xab\x5d\xff\xa0\xf4\x99\x7f\x00\x6a\xf9\x39\x79\x3c\xf9\x5f\x00\x00\x00\xff\xff\xf8\x4a\x33\xdb\xdf\x3a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/api.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}

// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Swagger statically implements the virtual filesystem provided to vfsgen.
var Swagger = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/api.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "api.swagger.json",
			modTime:          time.Time{},
			uncompressedSize: 19279,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x18\xe8\x0e\xb8\x3b\xa0\x4d\xba\xbd\x97\x22\x2f\x77\x81\x93\xed\x1a\xdb\x38\x41\x9c\xb6\x0f\xd7\xc2\xa0\xa5\xb1\xcc\x8d\x44\x6a\x49\xca\x39\xe3\xd0\xef\x7e\x18\x4a\xb2\x28\x59\x92\x65\xbb\x49\xec\xed\xf6\xa5\xad\x44\x0e\xe7\xcf\x8f\xc3\x99\xe1\xc8\xff\x3b\x01\xf0\xf4\x23\x0b\x43\x54\xde\x39\x78\x6f\x4f\xdf\x78\xaf\xe8\x19\x17\x33\xe9\x9d\x03\xbd\x07\xf0\x0c\x37\x11\xd2\xfb\x41\x94\x6a\x83\x0a\xae\x99\x60\x21\x2a\xb8\xb8\x1d\xc2\x78\xfc\x0b\x24\x4a\x2e\x78\x80\xca\x4e\x06\xf0\x16\xa8\x34\x97\x82\xa6\x2c\xde\x9c\xfe\x94\x53\x05\xf0\x7c\x29\x0c\xf3\xcd\x8a\x34\x80\x27\x58\x6c\x69\x8f\x59\xac\x53\x11\xc2\x60\x34\xb8\xcf\x87\x03\x78\xa9\x8a\xe8\xe5\xdc\x98\x44\x9f\x9f\x9d\x85\xdc\xcc\xd3\xe9\xa9\x2f\xe3\x33\x9d\x8d\x7f\xed\x0b\xdf\x9c\xf9\x31\x7b\xad\xf5\xbc\x9c\x87\x31\xe3\x76\x66\x3e\xec\xd4\x8f\x64\x1a\x08\x66\xf8\x02\xff\x1d\xd2\x4b\x22\xe2\xd9\xe1\xdf\x4e\x00\xbe\x59\xb1\xb5\x3f\xc7\x18\xb5\x77\x0e\xff\xc9\xf8\xb5\xeb\x16\xcc\xd3\x7f\x68\xc6\x57\x3b\xd6\x97\x42\xa7\x95\xc1\x2c\x49\x22\xee\x33\xc3\xa5\x38\xfb\x4d\x4b\x51\x8e\x4d\x94\x0c\x52\xbf\xe7\x58\x66\xe6\xba\xd4\xfd\x19\x4b\xf8\xd9\xe2\xa7\x33\x3f\x53\xbd\xab\xb9\x10\x5d\x45\x12\xfb\x69\x1c\x33\xb5\x24\xb1\x3f\xf3\x28\x02\x85\x46\x71\x5c\x20\x98\x39\x82\x36\xcc\xa4\x1a\xe4\x0c\x18\xe4\xc4\x80\x89\x00\xb8\xd1\xf0\x90\x4e\xd1\x97\x62\xc6\x43\x98\x49\x05\xbe\x14\x02\x7d\xc3\x17\xdc\x2c\x57\x2a\x05\xf0\x64\x82\xca\xb2\x3c\x0c\x68\x8d\xf7\x68\x72\x40\xb8\x83\x14\xea\x44\x0a\x8d\xba\xc2\x1b\x80\xf7\xf6\xcd\x9b\xda\x23\x00\x2f\x40\xed\x2b\x9e\x98\x1c\x2d\x17\xa0\x53\xdf\x47\xad\x67\x29\xb1\x9f\x51\x3a\x75\xc8\x67\x72\x92\x99\xd8\x1a\x31\x00\xef\xaf\x0a\x67\x44\xe7\x2f\x67\x01\xce\xb8\xe0\x44\x57\x13\x3a\xb4\x9e\x97\xec\xde\x61\x12\x2d\xbd\xca\xdc\x6f\x27\x4d\xff\xfe\xe6\xc8\x95\x30\xc5\x62\x34\xa8\x4a\x2b\x66\x7f\x6a\x12\x15\x78\xb6\x7f\xbf\xea\x94\x76\xc4\x62\x24\x83\x90\x79\x0a\x93\x18\x09\x53\x84\x48\xca\x07\x0c\x20\x4d\xd6\x64\xe7\x76\xe6\xef\x29\xaa\x65\xfd\x95\xc2\xdf\x53\xae\x90\x6c\x33\x63\x91\xc6\xda\x6b\xb3\x4c\x2c\x63\xda\x28\x2e\x42\xaf\x51\xe0\xaf\x8e\xc0\x86\x85\x75\x51\x0b\x07\x50\x4e\xfe\x7a\x52\xd3\x94\x17\x60\x84\x06\xbb\x81\x99\x8d\x29\x81\xd8\x01\xb2\x4b\x3b\xf4\x98\x70\x56\xe1\xf8\x50\xa0\xf6\x79\xce\x0c\x70\xed\x42\xed\x6f\x1a\x68\x22\x21\x2e\x40\x6d\x94\x5c\x1e\x1f\xd8\x12\xa9\x37\xf8\x40\x7b\x34\xd1\x61\xd4\x0b\x6d\x03\x85\xec\xb8\xd0\x56\xe1\xf8\x59\xd0\x36\x95\xc1\x1a\x1a\x32\xa0\x34\xbd\x71\x70\x62\x54\x5a\x87\xc9\x77\x90\xf9\x5a\x87\x7d\x24\xde\x1d\x6c\x27\x8e\xc2\xea\xc7\xf1\x59\xc4\x2b\x00\xdc\xe2\x4c\x66\x40\x73\xc9\xfd\xe7\xb4\x74\xaf\xa3\xf6\x03\x2d\x78\x0c\xc0\xac\xb2\xbc\x13\x32\xbf\xa3\x9d\x84\x0c\x50\x67\x21\xd0\x56\xe6\x0a\xd1\xac\x8e\x66\x4b\xa3\x88\xa3\x28\x4e\x62\xa5\x77\xc1\xa0\x87\x77\x29\x55\x32\x22\x52\xe3\x8c\x9d\xe3\x32\xa6\xc3\xf9\xb3\x78\x9b\x5c\xab\xa3\xed\x8e\x38\xe1\x44\x56\x83\x32\xb2\xb2\x27\xd9\xd1\x9c\x72\x9d\x80\x4e\xa4\x8c\x5c\x24\x6f\x15\x76\x11\x92\x81\x28\xc0\x4c\xc9\x78\x6b\x1c\x67\x11\x0e\x21\xe1\x96\xb8\x38\x06\x00\x57\x59\x3e\x60\xe4\x3a\x79\x40\x6e\xae\x95\xb1\xf4\xf3\x20\xf7\x55\x8f\x80\x53\x06\x38\x21\x96\x26\xf4\x44\x6f\xb3\x31\x57\xc8\xb3\x33\x4b\x31\x9f\x40\x36\xa6\x14\x5b\x8f\x54\x0c\xc6\x75\x74\x6e\xd0\x48\x4d\x27\x36\xf7\x8f\x22\x4a\x90\xa5\xf8\x59\xaa\x98\xd1\x19\xe2\xc5\x69\x64\xf8\x0b\x06\xba\x2c\x08\x1c\xed\x1a\xb9\xf5\xae\xbe\x08\x82\xa3\xda\xd2\x0e\xbf\x3f\x48\xdc\xeb\x48\xfc\xe4\x51\x6f\x89\xbc\x74\x03\xf0\xb4\xcf\xa2\xac\xc4\x24\xd2\x78\x8a\x8a\xce\xdd\x98\xf9\x73\x2e\x50\x03\x17\xd5\xe3\x66\x87\xa8\x69\x4c\xf4\x8f\x0a\x99\x15\x8e\x7f\x10\x6c\x56\x64\x7e\xd9\x9c\x2c\x4d\x42\xc5\x02\xdc\x36\x2d\x4b\x95\x80\x7c\x2a\x48\x8b\x93\x22\xca\x0f\xf9\x02\x45\xbf\xf8\xfe\x63\x46\x20\xe7\x7c\x28\x66\xf6\x7c\x20\xcc\x1d\x03\x70\xbb\x04\x38\xe0\x4a\x16\x18\x7a\xf6\x88\xc0\x14\x82\x2f\x85\xe6\x01\xd2\x21\x6e\xcd\x97\x9b\xf4\x68\xa2\xfe\xfe\x8e\x97\x19\x83\x71\x62\xe8\xac\x2f\x70\xdb\xa7\xc6\x55\xb5\xf0\x51\xe0\xb2\xca\xf2\x0f\xe2\x51\xab\x42\xbf\x8c\x4b\x2d\x2f\xf2\xb6\x76\xa5\xf9\x54\xe0\xa5\x0b\x01\x36\x95\xa9\x01\x96\x70\xd0\xa8\x16\x9b\x7c\xe9\xa7\x8c\xc2\x11\x3a\xd1\x9c\xf3\x67\x2b\x7a\xad\x2e\x30\x1d\x6e\xca\x2b\xc4\xf6\xe2\xcd\x75\x16\xa6\x8d\xd7\xea\x62\x85\x8b\x93\xd3\xdf\xd0\x2f\xeb\x8d\x5e\xa2\xc8\x4c\x86\xd7\xb4\xee\x3d\xbc\xd3\x44\x7b\x8d\x10\x34\xf8\xcb\x57\x95\x77\xc5\xd5\x32\x4d\x87\x87\x77\x45\x7d\xcd\x6b\xd4\xcd\xc3\x3b\xfd\x69\x0d\x91\xfd\xd7\xf8\x35\x9d\xa2\x12\x68\x50\x43\x41\xa6\x71\x99\x98\x31\x3d\x5e\x6a\x83\xb1\xc5\xe2\xf6\x0b\x5d\x33\x36\x06\x2b\x91\xb6\x64\x26\x3c\x68\x5f\xe9\x17\xa9\x4d\xee\x75\xf6\x59\x69\x5e\x90\x69\x5d\x68\x4f\x0b\xd9\xa5\x6c\x28\xdf\x65\x22\x5a\x68\x78\x7b\x11\x04\x6a\xf7\x45\x86\xb7\x40\x04\x50\xbb\x6b\xac\x9d\x8f\xab\x39\xf7\xb5\xdb\xed\x3c\xf9\xf0\x2a\x1e\xad\xb6\x2b\x1b\x7c\xcb\x1e\xf0\x0f\xb9\x99\xac\xbb\xca\xfe\x52\x93\x04\x86\x85\x20\x85\x0d\x6b\x42\x6e\x40\x61\x22\x35\x37\x52\x2d\x9b\xf5\x4c\x4b\xfa\x32\x8e\xb9\xd9\x79\xc5\x39\xd3\xf3\xa2\x48\x4a\x4b\xe6\xe4\x5a\x97\x33\x0a\x71\x42\x8a\xde\x0d\xaa\x9f\xe7\x68\xe6\x94\x1e\x2a\x10\xd2\xd8\x55\x89\x22\x3c\x32\x0d\x7e\x84\x4c\xc0\xe3\x1c\x05\x4c\x53\x1e\xb5\x30\x41\xaf\x82\x49\xb0\x2b\x03\x97\xcc\xd8\xa2\xb0\x25\xd3\x22\xa6\xdc\xcb\x8e\x39\xaa\x68\x91\x50\x42\xaa\x31\xa0\xe0\xcc\x97\x71\xc2\xa3\x96\x8d\x99\xbf\xdc\x6d\xb7\x0c\xf2\xc9\x76\xa9\x66\xfa\x49\xc4\x0c\x61\x7c\x27\xfa\xb7\xf9\x64\xe0\x26\x33\x53\xb6\x5e\x60\x03\xeb\x33\x50\xa9\x10\x14\x66\x57\xfc\x68\x63\x3c\xd1\x58\xbf\xd8\x63\xc3\xb9\xb5\xd5\xdd\xb0\xd8\x58\x71\xad\xd4\xd0\x34\x18\xd9\xac\xd3\x47\xa9\x1e\x50\x4d\x56\x55\xd0\x56\x7f\xba\x5e\x81\x6c\xa9\x3f\x76\x06\x14\xc5\x29\x9d\xa0\xdf\x5a\xa8\xad\x89\x76\x5d\xd4\x5f\x72\xa1\x8c\x74\x45\xdd\xda\x5a\x59\x20\xb3\x87\xbd\xe4\x43\x9b\x8a\xa6\x52\xd2\xde\xaf\x2a\x69\xb6\xaa\xaa\x36\xbe\xee\x72\x29\x65\xad\x89\x00\xeb\x56\x9a\xa6\x4b\x30\x73\xae\x81\x62\x75\xd4\xa6\x9f\x12\xf2\xc0\xe9\x12\x0d\xe3\xd1\xd0\x60\xbc\x8f\x16\x76\x3e\xe5\x1b\x1a\x85\x9a\x91\x99\x1d\x83\x93\x18\xb5\x66\xe1\x6e\x6b\x5d\x04\x81\x45\x1f\x8b\x1a\x42\xf7\x6a\x23\xd9\x46\x76\xca\xbe\xb2\xbd\x77\xa9\xd3\xa2\x66\x5d\xaa\xed\x50\x6b\xc7\xf5\x9a\x4e\xea\x0c\x74\xf6\x17\x64\xe4\xd6\xee\x67\xdb\x83\x8e\xad\x37\x57\x51\x5f\xf9\x13\x51\xdb\x21\xea\x90\x8d\xd9\x9e\x46\xd5\xd4\xe3\xa1\x48\xe3\x4a\x8e\xe7\x8d\xef\x2f\xee\x3f\x8e\x27\x1f\x47\xe3\xdb\xab\xc1\xf0\xe7\xe1\xd5\xa5\x9b\xeb\xde\xde\xdd\x7c\x1a\x8e\x87\x37\xa3\xe1\xe8\xbd\xfb\xfc\xee\xe3\x68\xed\xd1\xd5\xe0\x66\x34\x18\x7e\xa8\x3d\x1e\xdf\xdf\xdc\xde\xd6\x9e\x5d\xdd\xdd\xdd\xdc\xb9\x0f\x2e\xaf\xde\xdf\x5d\x5c\x5e\x5d\x16\x52\xaf\x8a\x09\x94\x57\xb2\x34\xb2\x1e\xb9\x83\xd3\x7a\x96\x5d\xd1\xcb\x17\x41\x07\x18\x9f\x71\xd4\xe0\xa7\x4a\xa1\x28\x3b\x2b\x6c\x50\x79\xfa\x45\x7c\x11\xf0\x1a\xd6\x17\x38\x87\x91\x34\xa0\xd1\xd8\xf7\xae\x32\xce\xe1\xde\x39\xc1\xb9\x86\x29\x52\x40\xe2\xdb\x06\xa1\xe0\xd4\x8e\xcf\x95\x54\x1d\x3a\x67\x34\x16\x45\x31\x34\x6b\x85\xd5\x30\x4b\xa3\x68\x09\xa9\x66\xd3\x08\xf3\xe9\xa5\x42\xcf\x61\x2c\x63\x04\x3a\xfe\x69\x2c\xf3\x0d\x5f\x60\xb4\xcc\x17\x0d\xa4\xc0\x22\x82\xcf\x97\x79\x05\x3a\xf5\xe7\xc0\x74\x5e\xa0\xa3\x61\xf4\x3a\x66\x96\x09\xa9\xf2\x7c\x4a\xce\xcc\x23\x53\xf9\x82\x85\xa9\x5a\x64\xcb\xae\x4b\x03\x3b\xd4\x5a\xb0\x3a\x2e\x66\xc4\x0f\xa4\x22\x93\xc1\x0e\x2b\xec\x5a\x1d\x99\xd7\xac\x34\x05\x8f\xca\x0a\x43\xcc\x4b\x50\xa8\x8d\x54\x68\x55\x01\xb3\x54\xf8\xd9\xde\xe5\x66\xe9\x35\x61\x5f\x0a\xa3\x64\x74\x1b\x31\x81\x6e\xa0\xb2\x87\x53\x8b\xd8\x14\x9f\x3a\xa6\x2a\x4b\x01\x1f\x68\xb5\x1e\x71\x15\xa9\x2e\xe3\xcc\x46\xbf\xd6\xca\x99\xec\x90\x90\xf0\xab\x3b\xaf\x66\xc7\xc5\x85\x36\x4c\xf8\x78\x9f\x89\xb1\x43\xc6\xb6\x4c\xb0\x72\xb5\x66\xa4\xd3\xdc\xf8\x77\xa2\x1e\x30\x15\x10\xa8\xc2\x24\xfd\x47\x5b\xb6\x91\x8a\xd6\x84\x91\x0b\x83\x61\xa5\x28\x57\x09\xc5\xb8\x30\xff\x7c\xdb\xe1\x40\xd7\x6f\xff\xfa\x67\xef\x99\x67\xc8\xfa\xe1\xf3\x4b\x17\x8d\x59\x73\x5c\x87\x8e\x6b\x48\xac\x77\x05\x1e\xc8\xb9\x9a\xb7\x74\x3b\xa1\x68\x6b\x71\x6b\x97\xe4\xb3\xe6\x73\x49\x9d\x8b\x32\x0d\x75\x4a\x5e\xa4\xd6\x2c\x73\xc9\x3a\xd9\x4e\x61\x50\xd1\x6d\x3e\x4b\xdb\x5b\x94\x00\x0d\xaa\x98\xaf\xe2\x66\x04\x67\x73\x9f\xb6\x81\xcb\x92\x9b\x58\x72\x36\x3b\xda\xee\xa0\x6e\xf1\x24\x6d\x85\xa2\x7c\x1b\x3c\xce\xb9\x3f\xb7\x99\xa9\xe2\x1a\x2b\x8a\xaf\x60\xe7\x08\x53\xb9\x1e\x32\xf6\xda\x62\xcd\xfd\xb2\x1d\xbb\xe7\x88\xf2\xbd\xc2\xd6\xfd\xb3\x3d\x17\xb1\x6b\x1f\xd5\x6c\x46\xa9\x13\xb8\xb7\xfb\xc2\xc0\xe6\x8b\xf5\x68\xb2\x60\x66\x75\xe3\xd0\x2f\xbc\x6c\xf8\xa0\xe0\xf0\x4c\x33\x90\x69\x14\x54\x84\x9d\x62\xf1\x5d\x41\x9b\xc7\x6b\x0e\xe6\x7b\xf9\xd9\x71\x25\x5a\xdf\x2a\xa5\x6f\x6a\x05\x3c\x3c\x7d\x7e\x66\x3a\x03\x30\xab\x5e\x55\x6d\x21\x68\x53\x07\xf6\xe1\x09\x3a\xac\x56\xe1\x78\x16\x40\x67\xf7\x26\x9d\xbb\xf6\x89\x5d\xb5\xbb\xd1\x37\xbb\xea\x0f\xf5\x5e\xfe\x2d\x2d\xb4\xd6\x56\xbd\x87\xa1\x76\xae\x8a\xde\xd7\x3a\xa7\x3b\x33\xf1\xa7\x0a\x25\x07\x44\xb7\xde\x43\xd6\xc9\xc9\x2a\x28\x7c\x22\x3c\xf4\xbd\x3f\xdd\x8c\x92\xf7\x68\xf4\xea\xb3\x8f\xec\x73\x02\xee\x7e\x98\xd4\xe7\x30\x6f\xe7\xa6\x28\x95\x15\xa7\x0b\x05\x9e\xef\xd1\x14\x9e\xee\x8b\x90\xca\x49\x13\x73\xe5\xba\x77\x79\x6d\xe0\xfc\xc3\xb9\x8e\x1d\x0e\x7c\xa7\x02\xdc\x77\x6b\x6f\x68\xa5\x3a\x3c\x7d\x0e\x98\xa8\x9f\xe0\x79\x63\x51\xcb\x01\x5e\xa4\x0c\xfb\xef\xbc\x9e\xfd\xe8\xb5\xda\x70\x25\x65\x49\xa4\xd6\x7c\x1a\x21\x28\x1e\xce\x0d\x08\xf9\xd8\xdb\x52\x95\x7e\x8d\xc3\xb3\xcb\x70\x06\xab\xee\x18\x1b\xe8\xde\xfc\xda\x69\x8f\x09\x6f\xbc\xd6\x86\x4e\x17\xb7\xe1\x76\xbc\xfb\xc2\xd3\x1d\xd9\xc7\x89\x65\xfe\x8a\x32\xd2\x22\x57\xad\x44\x36\x55\x03\xd5\x6b\x35\x2f\x91\xd7\xbb\x47\x23\xcb\xea\x40\x2d\x26\x60\x51\xba\xfb\x12\x76\x76\xf3\x1a\x1d\x08\xfe\x4e\x75\xb7\xef\xa2\x9c\xac\xbc\x69\xf9\x01\x8d\x2d\x79\xd7\xd1\x54\xf8\x36\x4a\xf2\x67\x59\x0f\x76\x2a\xeb\x75\x15\xf2\xd6\x5a\xc9\x0f\xa4\x51\xa0\x21\x34\x26\x6b\x65\xdf\x3f\x38\x5f\x39\x34\xdb\xe8\xb9\x4a\x4c\x15\xed\x6d\xd3\x33\x50\x69\x7c\xc8\xa4\xea\xe7\x7e\x1a\x3e\x77\x38\xbc\x33\xf4\x3b\xe4\xd3\xeb\x9a\x7d\x09\x67\xdb\xfe\x35\x5d\x93\xd9\x9e\xc1\x49\x8c\xd6\xbf\xfa\xd9\x0e\x3f\xeb\x8d\xce\x2f\xad\xd7\x2d\xbe\x2b\xe8\x0c\xc4\x76\x67\xa4\x08\x8b\x68\xe5\x47\x74\xaf\x0f\xe5\xbf\x76\xd1\xea\x1f\x6b\x5b\xae\xfa\x9d\xf1\xbf\x06\x95\x60\xd1\xa5\xf4\x9d\x86\xe7\xda\x95\xc8\xb5\x54\x98\x77\x1b\xf4\xfd\x01\xab\x2d\x7f\x76\x8a\xf8\x39\xf9\x76\xf2\xff\x00\x00\x00\xff\xff\x83\x76\x3b\xb8\x4f\x4b\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/api.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}

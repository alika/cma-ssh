// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Swagger statically implements the virtual filesystem provided to vfsgen.
var Swagger = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/api.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "api.swagger.json",
			modTime:          time.Time{},
			uncompressedSize: 19137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x18\xe8\x0e\xb8\x3b\xa0\x4d\xba\xbd\x97\x22\x2f\x77\x81\x93\xed\x1a\xdb\x38\x41\x9c\xb6\x0f\xd7\xc2\xa0\xa5\xb1\xcc\x8d\x44\x6a\x49\xca\x39\xe3\xd0\xef\x7e\x18\x4a\xb2\xa8\x7f\xb6\x6c\x37\x89\xbd\xdd\xbe\xb4\x95\xc8\xe1\xfc\xf9\x71\x38\x33\x1c\xf9\x7f\x27\x00\x9e\x7e\x64\x61\x88\xca\x3b\x07\xef\xed\xe9\x1b\xef\x15\x3d\xe3\x62\x26\xbd\x73\xa0\xf7\x00\x9e\xe1\x26\x42\x7a\x3f\x88\x52\x6d\x50\xc1\x35\x13\x2c\x44\x05\x17\xb7\x43\x18\x8f\x7f\x81\x44\xc9\x05\x0f\x50\xd9\xc9\x00\xde\x02\x95\xe6\x52\xd0\x94\xc5\x9b\xd3\x9f\x72\xaa\x00\x9e\x2f\x85\x61\xbe\x59\x91\x06\xf0\x04\x8b\x2d\xed\x31\x8b\x75\x2a\x42\x18\x8c\x06\xf7\xf9\x70\x00\x2f\x55\x11\xbd\x9c\x1b\x93\xe8\xf3\xb3\xb3\x90\x9b\x79\x3a\x3d\xf5\x65\x7c\xa6\xb3\xf1\xaf\x7d\xe1\x9b\x33\x1e\xeb\xd7\x0f\x8c\xe9\x72\x22\xc6\x8c\xdb\xa9\xf9\xb8\x53\x3f\x92\x69\x20\x98\xe1\x0b\xfc\x77\x48\x2f\x89\x8a\x67\x87\x7f\x3b\x01\xf8\x66\xe5\xd6\xfe\x1c\x63\xd4\xde\x39\xfc\x27\x63\xd8\x2e\x5c\x70\x4f\xff\xa1\x19\x5f\xed\x58\x5f\x0a\x9d\x56\x06\xb3\x24\x89\xb8\xcf\x0c\x97\xe2\xec\x37\x2d\x45\x39\x36\x51\x32\x48\xfd\x9e\x63\x99\x99\xeb\x52\xf9\x67\x2c\xe1\x67\x8b\x9f\xce\xfc\x4c\xf7\xae\xea\x42\x74\x35\x49\xec\xa7\x71\xcc\xd4\x92\xc4\xfe\xcc\xa3\x08\x14\x1a\xc5\x71\x81\x60\xe6\x08\xda\x30\x93\x6a\x90\x33\x60\x90\x13\x03\x26\x02\xe0\x46\xc3\x43\x3a\x45\x5f\x8a\x19\x0f\x61\x26\x15\xf8\x52\x08\xf4\x0d\x5f\x70\xb3\x5c\xa9\x14\xc0\x93\x09\x2a\xcb\xf2\x30\xa0\x35\xde\xa3\xc9\x11\xe1\x0e\x52\xa8\x13\x29\x34\xea\x0a\x6f\x00\xde\xdb\x37\x6f\x6a\x8f\x00\xbc\x00\xb5\xaf\x78\x62\x72\xb8\x5c\x80\x4e\x7d\x1f\xb5\x9e\xa5\xc4\x7e\x46\xe9\xd4\x21\x9f\xc9\x49\x66\x62\x0d\x62\x00\xde\x5f\x15\xce\x88\xce\x5f\xce\x02\x9c\x71\xc1\x89\xae\x26\x15\x96\xbc\xde\x61\x12\x2d\xbd\xca\xc4\x6f\x27\x6d\xff\xfe\xe6\x08\x95\x30\xc5\x62\x34\xa8\x4a\x13\x66\x7f\x6a\xe2\x14\x68\xb6\x7f\xbf\x5a\x2b\xea\x88\xc5\x48\xd6\x20\xdb\x14\xf6\x30\x12\xa6\x08\x91\x94\x0f\x18\x40\x9a\x34\x04\xe7\x76\xe6\xef\x29\xaa\x65\xfd\x95\xc2\xdf\x53\xae\x90\x0c\x33\x63\x91\xc6\xda\x6b\xb3\x4c\x2c\x63\xda\x28\x2e\x42\xaf\x55\xe0\xaf\x8e\xc0\x86\x85\x75\x51\x8b\xed\x5f\x4e\xfe\x7a\x52\xd3\x94\x17\x60\x84\x06\xd7\xa3\x32\x1b\x53\xa2\x70\x0d\xc2\x2e\xed\xd0\xa3\x01\x59\x85\xdd\x43\xc1\xd9\xe7\x39\x33\xc0\xb5\x8b\xb3\xbf\x69\xa0\x89\x04\xb7\x00\xb5\x51\x72\x79\x7c\x48\x4b\xa4\xde\xe0\xfd\xec\xa9\x44\xe7\x50\x2f\xa8\x0d\x14\xb2\x23\x82\x5a\x85\xdd\x67\x81\xda\x54\x06\x0d\x28\x64\x28\x69\x7b\xe3\x80\xc4\xa8\xb4\x8e\x91\x7d\x05\xbe\xd6\x61\x1f\x71\x77\x87\xd9\x89\xa3\xad\xfa\x11\x7c\x16\xf1\x0a\xf4\xb6\x38\x87\x19\xd0\x5c\xf2\xfa\x39\x2d\xdd\xeb\x78\xfd\x40\x0b\x1e\x3c\x24\xab\xfc\xee\x84\xc9\xef\x68\x24\x21\x03\xd4\x59\xcc\xb3\x95\xad\x42\x34\xab\xe3\xd8\xd2\x28\x02\x27\x0a\x8c\x58\xe9\x54\x30\xe8\xe1\x54\x4a\x95\x8c\x88\xd4\x38\x63\xe7\x88\x2c\xe9\xb0\xfd\x2c\x4e\x26\x57\xe9\x68\xbb\x63\x4d\x38\xa1\xd4\xa0\x0c\xa5\xec\xe9\x75\x34\x27\xdb\x5a\x34\x27\x52\x46\x2e\x8c\xb7\x8a\xb3\x08\xc6\x40\x14\x60\xa6\x64\xbc\x35\x88\xb3\xa8\x86\x90\x70\x4b\x5c\x1c\x3c\x7a\xab\xfc\x1e\x30\x6c\x9d\xa8\x3f\xb7\xd5\xca\x52\xfa\x79\x60\xfb\xaa\x47\x84\x29\x03\x9c\x10\x4b\x13\x7a\xa2\xb7\xd9\x95\x2b\xd8\xd9\x99\xa5\x98\x4f\x20\x1b\x53\x8a\x35\xa3\x13\x83\x71\x1d\x9a\x1b\x34\x52\xd3\x89\x4d\xf3\xa3\x88\x72\x61\x29\x7e\x96\x2a\x66\x74\x7a\x78\x71\x1a\x19\xfe\x82\x91\x2d\x0b\x02\x47\xbb\x46\x6e\xbd\xa5\x2f\x82\xe0\x78\xf6\xb3\xc3\xec\x8f\x10\xe8\x3a\xe2\x3e\x79\x98\x5b\x62\x2e\xdd\x00\x39\xed\xb3\x28\xab\x23\x89\x34\x9e\xa2\xa2\xe3\x36\x66\xfe\x9c\x0b\xd4\xc0\x45\xf5\x94\xd9\x21\x52\x1a\x13\xfd\xe3\xc1\x64\x85\xdd\x1f\x01\x95\x15\x81\x5f\x36\xfd\x4a\x93\x50\xb1\x00\xb7\xcd\xc0\x52\x25\x20\x9f\x0a\xd2\x22\xa4\x88\xe9\x43\xbe\x40\xd1\x2f\x9a\xff\x98\x11\xc8\x39\x1f\x8a\x99\x3d\x13\x08\x6d\x07\x0f\xd9\x75\xdc\x1f\x70\xad\x0a\x0c\x3d\x7b\x44\x60\x0a\xc1\x97\x42\xf3\x00\xe9\xd4\xb6\xb6\xcb\xed\x79\x34\x31\x7e\x7f\x7f\xcb\x8c\xc1\x38\x31\x74\xb8\x17\xa0\xed\x53\xc5\xaa\x5a\xf8\xf0\x41\x59\xe5\xf7\x47\x70\xa4\x55\x89\x5f\xc6\x93\x96\xf7\x73\x5b\x7b\xd0\x7c\x2a\xf0\xd2\x79\x00\x9b\xca\xd4\x00\x4b\x38\x68\x54\x8b\x4d\x2e\xf4\x53\x46\xe1\xd8\x7c\x67\xce\xf6\xb3\x95\xb5\x56\x77\x92\x0e\x2b\xe5\xad\x60\x77\x85\xe6\x3a\x0b\xca\xc6\x8d\xca\x57\xe1\xd9\xe4\xf4\x37\xf4\xcb\x72\xa2\x97\x28\xb2\x91\xe1\x35\x95\x7b\x0f\xef\x34\xd1\x6e\x10\x82\x16\x37\xf9\xaa\xf2\xae\xb8\x2e\xa6\xe9\xf0\xf0\xae\xa8\xa0\x79\xad\xba\x79\x78\xa7\x3f\x35\xe0\xd8\x7f\x8d\x5f\xd3\x29\x2a\x81\x06\x35\x14\x64\x5a\x97\x89\x19\xd3\xe3\xa5\x36\x18\x5b\x20\x6e\xbf\xd0\x35\x63\x63\xb0\x12\x69\x4b\x66\xc2\x83\xee\x95\x7e\x91\xda\xe4\xfe\x66\x9f\x95\xe6\x05\x99\xce\x85\xf6\xb4\x90\x5d\xca\x06\xee\xeb\x4c\x44\x0b\x0d\x6f\x2f\x82\x40\xed\xbe\xc8\xf0\x16\x88\x00\x6a\x77\x8d\xc6\xb1\xb8\x9a\x73\x5f\xbb\xb0\xce\x53\x0d\xaf\xe2\xce\x6a\xbb\xb2\xc5\xb1\xec\x01\xff\x90\x9b\x49\xd3\x4f\xf6\x97\x9a\x24\x30\x2c\x04\x29\x6c\x34\x13\x72\x03\x0a\x13\xa9\xb9\x91\x6a\xd9\xae\x67\x5a\xd2\x97\x71\xcc\xcd\xce\x2b\xce\x99\x9e\x17\x95\x50\x5a\x32\x27\xd7\xb9\x9c\x51\x88\x13\x52\xf4\x6e\x50\xfd\x3c\x47\x33\xa7\x64\x50\x81\x90\xc6\xae\x4a\x14\xe1\x91\x69\xf0\x23\x64\x02\x1e\xe7\x28\x60\x9a\xf2\xa8\x83\x09\x7a\x15\x4c\x82\x5d\x19\xb8\x64\xc6\x56\x7e\x2d\x99\x0e\x31\xe5\x5e\x76\xcc\x51\x45\x8b\x84\x12\x52\x8d\x01\xc5\x64\xbe\x8c\x13\x1e\x75\x6c\xcc\xfc\xe5\x6e\xbb\x65\x90\x4f\xb6\x4b\xb5\xd3\x4f\x22\x66\x08\xe3\x3b\xd1\xbf\xcd\x27\x03\x37\x99\x99\xb2\xf5\x02\x1b\x4f\x9f\x81\x4a\x85\xa0\xe8\xba\xe2\x47\x5b\x83\x89\x66\xa9\x62\x8f\xdd\xe6\x16\x50\x77\x03\x62\x6b\x59\xb5\x52\x28\xd3\x60\x64\xbb\x42\x1f\xa5\x7a\x40\x35\x59\x95\x3a\x3b\x9d\x69\xb3\xcc\xd8\x51\x64\xec\x0e\x25\x8a\xf3\x39\x41\xbf\xb3\x14\x5b\x93\xeb\xba\xa8\xb3\xe4\x12\x19\xe9\xca\xb9\x9d\x9d\xb2\xf8\x65\x0f\x4b\xc9\x87\x2e\xe5\x4c\xa5\xa4\x2d\x5f\x55\xcf\x6c\x55\x34\x6d\x7d\xbd\xce\x93\x94\x05\x25\xc2\xa9\x5b\x4e\x9a\x2e\xc1\xcc\xb9\x06\x0a\xce\x51\x9b\x1e\x1a\xc8\x83\xa5\x4b\x34\x8c\x47\x43\x83\xf1\x3e\x2a\xd8\xf9\x64\x6f\x69\xf9\x69\x07\x64\x76\xf4\x4d\x62\xd4\x9a\x85\xbb\xad\x75\x11\x04\x16\x74\x2c\x6a\x89\xd5\xab\xfd\x60\x1b\xd9\x29\xdb\xc3\xf6\xde\x9c\x4e\xa7\x99\x75\xa3\xb6\xd1\xac\x1b\xd1\x0d\x9d\xd4\x19\xe8\xee\x17\xc8\x68\x35\xae\x5c\xbb\xa3\x8c\xed\xf6\x54\x51\x44\xf9\x13\x4b\xdb\x61\xe9\x30\xcd\xd8\x9d\x2e\xd5\x14\xe3\xa1\x48\xe3\x4a\x2e\xe7\x8d\xef\x2f\xee\x3f\x8e\x27\x1f\x47\xe3\xdb\xab\xc1\xf0\xe7\xe1\xd5\xa5\x9b\xd0\xde\xde\xdd\x7c\x1a\x8e\x87\x37\xa3\xe1\xe8\xbd\xfb\xfc\xee\xe3\xa8\xf1\xe8\x6a\x70\x33\x1a\x0c\x3f\xd4\x1e\x8f\xef\x6f\x6e\x6f\x6b\xcf\xae\xee\xee\x6e\xee\xdc\x07\x97\x57\xef\xef\x2e\x2e\xaf\x2e\x0b\x91\x57\x15\x03\xca\x1f\x59\x1a\x59\x17\xbc\x86\xd3\x7a\x2a\x5d\xd1\xcb\x17\x41\xc7\x15\x9f\x71\xd4\xe0\xa7\x4a\xa1\x28\x7b\x24\x6c\xf0\x78\xfa\x45\x7c\x11\xf0\x1a\x9a\x0b\x9c\xc3\x48\x1a\xd0\x68\xec\x7b\x57\x19\xe7\x70\xef\x1c\xd6\x5c\xc3\x14\x29\xf0\xf0\x6d\x9f\x4f\x70\x6a\xc7\xe7\x4a\xaa\x0e\x9d\x33\x1a\x8b\xa2\x18\x9a\x75\xb1\x6a\x98\xa5\x51\xb4\x84\x54\xb3\x69\x84\xf9\xf4\x52\xa1\xe7\x30\x96\x31\x02\x9d\xf4\x34\x96\xf9\x86\x2f\x30\x5a\xe6\x8b\x06\x52\x60\x11\xa9\xe7\xcb\xbc\x02\x9d\xfa\x73\x60\x3a\xaf\xbf\xd1\x30\x7a\x1d\x33\xcb\x84\x54\x79\xde\x24\x67\xe6\x91\xa9\x7c\xc1\xc2\x54\x1d\xb2\x65\xd7\x9f\x81\x1d\x6a\x2d\x58\x1d\x17\x33\xe2\x07\x52\x91\xc9\x60\x87\x15\x76\xad\x8e\xcc\xab\x52\x9a\x82\x44\x65\x85\x21\xe6\x25\x28\xd4\x46\x2a\xb4\xaa\x80\x59\x2a\xfc\x6c\xd7\x72\xb3\xf4\x1a\xc0\x97\xc2\x28\x19\xdd\x46\x4c\xa0\x1b\x93\xec\xe1\xcb\x22\x36\xc5\x27\x8d\x9d\xca\x64\xff\x03\x2d\xd5\x23\x7e\x22\xa5\x65\x6c\xd9\xf8\xd6\xda\x37\x13\x1c\x12\x92\x7c\x75\x87\xd5\xee\xac\xb8\xd0\x86\x09\x1f\xef\x33\x19\x76\xc8\xc9\x96\x09\x56\xae\xca\x8c\x74\xfa\x12\xff\x4e\xd4\x03\xa6\x02\x82\x53\x98\xa4\xff\xe8\xca\x27\x52\xd1\x99\x12\x72\x61\x30\xac\xd4\xdc\x2a\x51\x17\x17\xe6\x9f\x6f\xd7\xf8\xcd\xe6\x6d\x5e\xff\xfc\x3c\xf3\x09\x59\x13\x7b\x7e\x95\xa2\x31\xeb\x6e\x5b\xa3\x63\x17\x83\xf5\x9e\xbe\x03\x39\x48\xf3\x3e\x6c\x27\xe4\xec\xac\x5d\xed\x92\x5b\xd6\x5c\x2d\xe9\x72\x51\x66\x99\x4e\x45\x8b\x74\x9a\xe5\x26\x59\x2b\xda\x29\x0c\x2a\x8a\xcd\x67\x69\x7b\x37\x12\xa0\x41\x15\xf3\x55\x7c\x8c\xe0\x6c\xeb\xd3\x2e\x64\x59\x72\x13\x4b\xce\xe6\x3f\x5b\x9c\xcc\x1d\x0e\xa4\xab\x08\x94\x6f\x80\xc7\x39\xf7\xe7\x36\xeb\x54\x5c\x63\x45\xeb\x15\xd4\x1c\x5b\xa6\xd6\x43\xc0\x5e\x3b\xab\xbd\xcf\xb5\x6b\xd3\x1c\x51\x3a\x57\x58\xb9\x7f\x32\xe7\x02\xb5\xf1\xf5\xcb\x06\x70\x3a\xd1\x79\xb7\xf3\x0b\x6c\x3a\x58\x8f\x1a\x0b\x4e\x56\x37\x08\x3d\xc2\xc8\x96\xce\xff\xc3\x33\xca\x40\xa6\x51\x50\x91\x74\x8a\xc5\x07\x00\x5d\x2e\xae\x3d\x5c\xef\xe5\x58\xc7\x95\x90\xbc\x7f\xae\xde\xd6\xbf\x77\x78\xca\xfc\xcc\x74\x86\x5b\x56\xbd\x74\xea\x2b\x65\x5b\xb7\xf4\xe1\x49\x39\xac\x96\xd4\x78\x16\x22\x67\x37\x20\x6b\x77\xea\x53\x3a\x66\x77\x73\x6f\x76\xcc\x1f\xea\x1d\xf7\xdb\xd8\xa6\xd1\xff\xbc\x87\x89\x76\x2e\x6e\xde\xd7\x5a\x9c\xd7\xe6\xd7\x4f\x15\x2c\x0e\x88\x6e\xbd\xeb\x6b\x2d\x27\xab\xb0\xef\x89\x90\xd0\xf7\x0e\x74\x33\x44\xde\xa3\xd1\xab\x2f\x33\xb2\xa6\x7f\xee\x7e\x35\xd4\xe7\xdc\xee\xe6\xa6\x28\x7d\x15\xc7\x09\x45\x97\xef\xd1\x14\x0e\xee\x8b\x90\xca\x49\x01\x73\xe5\xba\xf7\x71\xad\xc8\xfc\xc3\x79\x8c\x6d\xcf\x76\xa7\x96\xdb\x6b\x47\x6f\x68\x7e\x3a\x3c\x4d\x0e\x98\xa8\x1f\xd6\x79\x2b\x50\xc7\x59\x5d\xa4\x03\xfb\x6f\xb8\x9e\x2d\xe3\xb5\x12\x6f\x25\x1d\x49\xa4\xd6\x7c\x1a\x21\x28\x1e\xce\x0d\x08\xf9\xd8\xcf\x4c\x95\x3e\x8b\xc3\x33\xca\x70\x06\xab\x96\x16\x1b\xca\xde\xfc\xba\xd6\x18\x13\xde\x7a\x1d\x0d\x6b\xdd\xda\x86\x5b\xed\xf5\x17\x95\xee\xc8\x3e\x8e\x2b\xf3\x51\x94\x6a\x16\x49\x68\x25\x88\x71\xac\x53\x2f\xbf\xbc\x44\xb6\xee\x9e\x85\x2c\x2b\xed\x74\xe8\x9f\x45\xe9\xee\x4b\xd8\xd9\xed\x6b\x74\x61\xf7\x3b\x15\xd1\xbe\x8b\x66\xb2\x42\xa5\xe5\x07\x34\x76\xe4\x54\xc7\x51\xae\xdb\x28\xc6\x9f\x35\x3a\xd8\xa9\x46\xd7\x59\x95\x6b\xb4\x7a\x1f\xc8\xbd\x7e\x4b\x08\x4c\xa6\xca\xbe\x4c\x70\xbe\x3f\x68\x37\xd0\xb3\x94\x8c\x2a\xaa\xdb\xe6\x8a\xbf\xd2\xa4\x90\x89\xd4\xc3\xe5\xb4\x7c\x85\x70\x78\x27\xe6\xbe\x89\x72\x53\xa7\x2f\xe1\x5d\xbb\x3f\x6c\x6b\x33\xd8\x33\x38\x86\x51\xf3\x33\x9c\x2d\x90\xd3\xec\x42\x7e\x69\xa5\x6e\xd1\xee\xbf\x36\xe0\xda\x9d\x91\x22\xfc\xa1\x95\x1f\xd1\xbd\xf6\x93\xff\xda\x5a\xa5\x7f\xac\xdd\xb8\x6a\x46\xc6\xff\x1a\x54\x82\x45\x97\xd2\x77\xba\x91\x6b\x17\x1a\xd7\x52\x61\xde\x1c\xd0\xf7\x17\xa3\xb6\xfd\x9d\x27\x62\xe8\xe4\xdb\xc9\xff\x03\x00\x00\xff\xff\xb5\x25\x5a\xde\xc1\x4a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/api.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}

// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Swagger statically implements the virtual filesystem provided to vfsgen.
var Swagger = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/api.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "api.swagger.json",
			modTime:          time.Time{},
			uncompressedSize: 14685,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x6f\xdb\xc8\xf5\x7f\xf7\xa7\x38\xe0\xff\x0f\xb4\x05\x12\x2b\x9b\xbe\x14\x7e\x69\x0d\xd9\x4d\x85\x4d\x6c\xc3\x72\x36\x0f\x6d\x60\x8c\xc8\x23\x72\x62\x72\x86\x99\x33\x94\x2a\x14\xfe\xee\xc5\x5c\x68\x5e\x44\x4a\xb4\x64\x6f\xa4\xee\xee\xcb\x46\xe4\xcc\x99\x73\xf9\xf1\x5c\xc7\xff\x39\x01\x08\x68\xc9\xe2\x18\x55\x70\x06\xc1\xfb\xd3\x77\xc1\x1b\xf3\x8c\x8b\xb9\x0c\xce\xc0\xbc\x07\x08\x34\xd7\x29\x9a\xf7\xe3\xb4\x20\x8d\x0a\x3e\x31\xc1\x62\x54\x70\x7e\x33\x81\xe9\xf4\x1f\x90\x2b\xb9\xe0\x11\x2a\xbb\x19\x20\x58\xa0\x22\x2e\x85\xd9\xb2\x78\x77\xfa\x93\xa7\x0a\x10\x84\x52\x68\x16\xea\x27\xd2\x00\x81\x60\x99\xa5\x3d\x65\x19\x15\x22\x86\xf1\xd5\xf8\xce\x2f\x07\x08\x0a\x95\x9a\x97\x89\xd6\x39\x9d\x8d\x46\x31\xd7\x49\x31\x3b\x0d\x65\x36\x22\xb7\xfe\x6d\x28\x42\x3d\x0a\x33\xf6\x96\x28\xa9\xf6\x61\xc6\xb8\xdd\xe9\x97\x9d\x86\xa9\x2c\x22\xc1\x34\x5f\xe0\xdf\x62\xf3\xd2\x10\x09\xec\xf2\xc7\x13\x80\x47\x2b\x36\x85\x09\x66\x48\xc1\x19\xfc\xd3\xf1\x6b\xcf\x2d\x99\x37\x3f\xcc\x8e\xaf\x76\x6d\x28\x05\x15\x8d\xc5\x2c\xcf\x53\x1e\x32\xcd\xa5\x18\x7d\x23\x29\xaa\xb5\xb9\x92\x51\x11\x0e\x5c\xcb\x74\x42\x95\xee\x47\x2c\xe7\xa3\xc5\x4f\xa3\xd0\xa9\xbe\xae\xb9\x18\xeb\x8a\x34\xec\x17\x59\xc6\xd4\xca\x88\xfd\x85\xa7\x29\x28\xd4\x8a\xe3\x02\x41\x27\x08\xa4\x99\x2e\x08\xe4\x1c\x18\x78\x62\xc0\x44\x04\x5c\x13\x3c\x14\x33\x0c\xa5\x98\xf3\x18\xe6\x52\x41\x28\x85\xc0\x50\xf3\x05\xd7\xab\x27\x95\x02\x04\x32\x47\x65\x59\x9e\x44\xe6\x8c\x0f\xa8\x3d\x20\xea\x8b\x14\x52\x2e\x05\x21\x35\x78\x03\x08\xde\xbf\x7b\xd7\x7a\x04\x10\x44\x48\xa1\xe2\xb9\xf6\x68\x39\x07\x2a\xc2\x10\x89\xe6\x85\x61\xdf\x51\x3a\xad\x91\x77\x72\x1a\x33\xb1\x35\x62\x00\xc1\xff\x2b\x9c\x1b\x3a\xff\x37\x8a\x70\xce\x05\x37\x74\xc9\xa0\x83\x28\xa9\xd8\xbd\xc5\x3c\x5d\x05\x8d\xbd\x8f\x27\x5d\xff\x7e\xac\xc9\x95\x33\xc5\x32\xd4\xa8\x2a\x2b\xba\xff\x5a\x12\x95\x78\xb6\xff\x7f\xb3\x51\xda\x2b\x96\xa1\x31\x88\x31\x4f\x69\x12\x2d\x61\x86\x90\x4a\xf9\x80\x11\x14\xf9\x9a\xec\xdc\xee\xfc\x5e\xa0\x5a\xb5\x5f\x29\xfc\x5e\x70\x85\xc6\x36\x73\x96\x12\xb6\x5e\xeb\x55\x6e\x19\x23\xad\xb8\x88\x83\x4e\x81\xbf\xd6\x04\xd6\x2c\x6e\x8b\x5a\x3a\x80\x6a\xf3\xd7\x93\x96\xa6\x82\x08\x53\xd4\xb8\x19\x98\x6e\x4d\x05\xc4\x0d\x20\xbb\xb0\x4b\x8f\x09\x67\x0d\x8e\x0f\x05\x6a\x5f\x12\xa6\x81\x53\x1d\x6a\x7f\x20\x30\x1b\x0d\xe2\x22\x24\xad\xe4\xea\xf8\xc0\x96\x4b\xda\xe2\x03\x6d\x68\x32\xc1\x68\x10\xda\xc6\x0a\xd9\x71\xa1\xad\xc1\xf1\xaf\x82\xb6\x99\x8c\xd6\xd0\xe0\x80\xd2\xf5\xa6\x86\x13\xad\x8a\x36\x4c\x5e\x40\xe6\x4f\x14\x0f\x91\xf8\x25\xc0\x56\x6c\xc1\x1a\x8b\xbe\x15\xa4\x81\x3d\x13\x74\xe7\x76\x9b\x67\xe0\x4a\x46\x48\x47\x81\xbc\x06\xdb\xbf\x11\xe4\x35\x64\x7e\x75\xe4\x9d\xd4\x14\xd6\x4e\x04\x47\x29\x6f\xb8\xbe\x67\x64\x83\x0c\xcc\x5e\x93\x78\x78\x5a\x34\x28\xc9\xfb\x68\x0e\x3c\x06\x60\x36\x59\xde\x09\x99\x2f\x68\xa7\x22\x8f\x15\x8b\xf0\xb9\xa6\x2a\x94\x00\xbf\x15\xa4\x55\x1b\xd9\xdc\x9c\x41\xcc\x17\x28\x06\xb8\x95\x0f\xa8\x3f\x3b\x02\x9e\xf3\x89\x98\x4b\x95\xd9\x15\xc7\x62\xc7\x5e\x01\x0e\x38\xaf\x02\x6d\x9e\x2d\x11\x98\x42\x53\x4a\x91\xa9\x8c\xb9\x70\xa5\x95\x37\xe9\x11\x66\x5a\x5b\x83\x9f\xd6\x98\xe5\xda\xa4\x93\x25\x6e\x87\x04\xbf\xa6\x85\x8f\x02\x97\x4d\x96\x7f\x23\x91\xaf\x29\xf4\x8f\x09\x7d\x55\x5b\xe9\xd9\xae\xd4\x6f\x05\x5e\xb9\x10\x60\x33\x59\x68\x60\x39\x07\x42\xb5\xd8\xe6\x4b\x7f\x71\x14\x8e\xd0\x89\x7a\xce\x7f\xb5\x40\xf8\xd4\x4e\xab\x71\x53\x35\xb4\xda\x29\xd4\x2d\x66\x72\x81\x9f\x58\x98\x70\x81\xd3\x1c\xc3\xba\x79\x4b\xe7\x26\x67\xdf\x30\xac\xb2\x8f\x20\x57\xc6\x40\x9a\xb7\xf4\x1d\xf0\xbc\xad\xff\x96\x7b\x7c\xd3\x78\x57\xf6\x35\xef\x12\x04\x9e\x9b\x8c\x28\x73\x7c\x54\xb2\x3d\x76\x22\xb2\xa5\xd5\x0e\x6c\xec\x21\x44\xcc\xf5\xfd\x3a\xd4\x9f\x27\x8d\x66\x31\x48\x61\xc3\x52\xcc\x35\x28\xcc\x25\x71\x2d\x55\x0d\x00\x75\x33\x9b\x23\x43\x99\x65\x5c\xef\x7c\x62\xc2\x28\x29\x9b\x59\xe6\x48\x4f\xae\xf7\x38\xad\x10\xef\x49\xb3\x56\xaf\x68\xe8\x91\x5f\x12\xd4\x09\x2a\x90\x0a\x84\xd4\xf6\x54\x43\x11\x96\x8c\x20\x4c\x91\x09\x58\x26\x28\x60\x56\xf0\xb4\x87\x09\xf3\x2a\xba\x8f\x76\x65\xe0\x82\x69\xdb\xbc\xb3\x64\x7a\xc4\x94\x7b\xd9\xd1\xa3\xca\x1c\x12\x4b\x28\x08\x23\x13\x5c\x43\x99\xe5\x3c\xc5\xee\x13\xfd\x4b\xb5\xd3\x79\x63\xbf\xd9\x1e\xd5\x4d\x3f\x4f\x99\x36\x18\xdf\x89\xfe\x8d\xdf\x0c\x5c\x3b\x33\xb9\xf3\x22\x9b\x18\x8d\x40\x15\x42\x98\x34\xc9\x35\xc3\xfd\xd9\x9d\x5f\x5f\x4f\x2d\xb6\xc7\x27\xe7\xe3\xec\x2e\x30\xdc\x29\xff\xeb\xd6\x2e\x8b\xa2\x7b\x61\xeb\xff\x1e\x56\x98\x52\xac\x19\xed\x03\xae\x31\x6b\xaf\xdf\x12\x12\xea\xbe\xb6\x1e\x00\xba\x25\xf4\xab\x09\x96\x09\x0f\x13\x23\xd7\x92\x09\x9b\xe6\xb1\xc8\x02\xb2\x26\x7a\xb7\x58\xca\x7a\xf8\xd7\x95\x6c\x7b\x54\xd9\x47\x52\x27\x01\xcc\x95\xcc\x7a\xc4\x1d\x8a\x53\x17\x84\xf7\x40\xaa\x7c\xe8\x53\xe1\x4c\x4a\xe3\xf7\x9a\x4a\x74\x01\xa9\xf7\x75\x85\x63\x66\x30\xcc\x09\x58\x33\x17\xf9\x5e\x20\xe9\x61\x72\x7a\x09\x2f\x50\x33\x9e\x4e\x34\x66\x3f\xe4\x83\xec\x98\xa9\x74\xa3\xd2\xcd\xc3\xee\x33\x24\x62\xf1\x6e\x67\x9d\x47\x91\x85\x1f\x4b\x3b\xf2\xca\xe6\xcc\x6d\x2b\x3b\xd5\x08\x6e\x6f\x3f\x54\x9b\xe6\xd9\x78\x61\x87\x79\x83\xbe\x54\xc7\x6f\x9b\x81\x8d\xad\x58\x47\x6e\xea\x36\xf6\x67\x07\xdb\x34\xb1\x1d\x57\xbf\x23\xea\x99\x88\x3a\x64\x63\x4e\xdb\xbc\xf5\xa9\x27\x40\x51\x64\x8d\x02\x24\x98\xde\x9d\xdf\x7d\x9e\xde\x7f\xbe\x9a\xde\x5c\x8e\x27\x7f\x9f\x5c\x5e\xd4\x0b\xb1\x9b\xdb\xeb\x5f\x26\xd3\xc9\xf5\xd5\xe4\xea\x43\xfd\xf9\xed\xe7\xab\xb5\x47\x97\xe3\xeb\xab\xf1\xe4\x63\xeb\xf1\xf4\xee\xfa\xe6\xa6\xf5\xec\xf2\xf6\xf6\xfa\xb6\xfe\xe0\xe2\xf2\xc3\xed\xf9\xc5\xe5\x45\x29\xf5\xd7\xda\xfc\x73\xce\x8a\xd4\xba\xdc\x0d\x9c\x56\x0a\x7d\x0b\xeb\xcb\xce\xe0\x4a\x6a\x20\xd4\xff\x12\xf0\x16\xea\x22\x9d\x81\x31\x40\xfd\x89\xb5\x06\x02\x17\x11\x0f\x99\xc6\x66\x2a\xc2\x09\x66\x68\x72\x8f\xd0\x8e\x4c\xa2\x53\x4b\xd0\xeb\xc2\xd1\xf2\x3f\x36\x92\x49\x98\xa1\x83\xa2\x24\xe3\x2e\x0e\x10\xcc\x8b\x34\x5d\x41\x41\x6c\x96\xa2\x27\x5d\xe9\xd4\x93\xaf\x1e\x74\x1c\xc1\x34\x90\xcc\x10\x96\x52\x3d\x18\x82\x2c\xd4\x7c\x81\xe9\xca\x73\x1d\x49\x81\x65\x19\xe3\x79\x79\x63\xe2\x53\x02\x8c\x7c\x2a\x65\x96\x99\xd7\x19\xb3\x9c\xda\x72\x20\x42\x20\x39\xd7\x4b\xa6\x3c\x57\xa5\x49\x1d\x4b\xe5\xaf\x61\x9a\x73\xb3\xea\xc8\xd2\xb1\x30\x70\x44\xec\x3f\x37\x52\xc8\x98\x11\x03\x0a\xe1\xf4\x63\x09\x94\xb0\x71\x34\xca\x5f\x1b\xc9\xf8\x66\x0e\x99\xac\x5c\x59\x05\x19\x85\x98\x9c\x84\xb4\x54\x68\x6d\x00\xf3\x42\x84\xce\x6f\x70\xed\x4b\xbc\xd6\x77\x27\x85\x56\x32\xbd\x49\x99\x78\xa9\x5a\x3b\x65\x33\x4c\x5f\x39\x55\xfd\xb9\x98\xa1\x12\xa8\x91\x3e\x9a\xd3\x06\x24\x71\x46\xaf\x8e\x33\x9b\x6f\x5b\x4d\x3a\xd9\x21\x37\xc2\x97\x15\x3e\x75\x3b\x4d\x2e\x48\x33\x11\xe2\x9d\x13\x63\x87\x52\x78\x95\x63\xad\x91\x40\xc6\x54\xd5\x38\xf0\x8f\x86\x7a\xc4\x54\x64\x80\x1a\xe7\xc5\x9f\xfa\xca\xb8\x42\xf4\x56\xe2\x5c\x68\x8c\x1b\xdd\xaa\x46\x9e\xc7\x85\xfe\xf3\xfb\x0d\xce\x5b\x14\xd9\xcc\x7c\x28\xf3\x2e\x4d\x9c\xb4\x78\x69\xf9\xfd\x1c\x43\x3e\xf7\xd7\x96\xfc\x34\x82\xd0\x4d\x92\x36\xe8\xb8\x85\xc4\xf6\xf0\xf6\x40\x62\xba\xbf\x79\xf3\x64\xab\xbe\x12\xf8\xe1\x2f\xb4\x4b\x55\xdf\x6a\xf9\x19\x75\x2e\xaa\xfa\xbe\xc2\xb9\x55\xab\x71\x87\xe8\x3c\x19\x9d\xc2\xb8\xa1\x5b\xbf\x8b\x6c\x79\x19\xa1\x46\x95\x71\x81\x11\xcc\x56\x56\x9a\xda\xc7\x7d\xda\x07\x2e\x4b\xee\xde\x92\xeb\xae\xca\x36\x26\x09\x3d\x9e\x64\x50\x4d\x65\x4a\x7e\xc5\x09\x1b\x8a\x6f\x60\xa7\x9b\x67\xa7\x10\xcb\xec\x7d\x2e\xe5\x6b\xbb\x9d\xbd\xea\xc6\x2e\x19\x07\x26\x47\xeb\x77\x39\x0e\xb0\x52\x5c\x6f\xbc\x95\x86\x5c\x32\xaa\x7f\x3f\x0e\x92\x9c\x3a\xca\xc8\x3a\x1c\xd7\x2e\x36\x6e\x87\x60\xad\x22\xe8\x77\x74\x91\x2d\x44\xdb\x69\x6a\xc9\xcc\x53\x9f\x7d\x98\x69\x3a\x2e\x75\x1d\x9e\x69\xc6\xb2\x48\xa3\x86\xb0\x33\x2c\xef\x76\xf5\xb9\xb3\xee\x2a\x61\x90\x13\x9d\x36\xca\x80\x67\xf5\x0a\xba\x46\xf4\x87\xa7\xcf\x49\x2b\x25\x74\x89\x28\xad\xc8\x00\x6f\x13\x98\x5f\xd9\x3d\xd5\xf1\xbf\xdd\x3d\x7d\x6c\x5f\xf6\x78\xa6\x85\xfe\xe7\xac\xb3\x83\xab\xa9\x35\xb5\x86\x6a\x6f\xcb\xd5\x85\xc3\xd3\xe7\x98\x89\xb6\xef\xf0\xdd\xea\x1e\xd7\x51\x66\x22\xfb\x83\x7d\xc3\x1d\x86\x0d\xed\xae\x46\x26\x94\x4b\x22\x3e\x4b\x11\x14\x8f\x13\x0d\x42\x2e\x07\x5b\xaa\x31\x1f\x3d\x3c\xbb\x4c\xe6\xf0\x34\x8d\xb6\x21\xf6\xfa\xe7\x8d\xf6\xb8\xe7\x9d\x63\x48\xe8\x87\xfa\xf6\x69\xe6\xe6\x01\x55\x7d\xe5\x90\x5a\xc2\x9e\x62\x13\xdd\x32\x05\x6e\x04\x8f\xa6\x81\xda\x25\xe0\x8f\x28\x17\x6c\xdd\xe4\x4b\x06\xe6\xca\xcb\x1e\x13\xb0\xb4\xd8\xfd\x08\xbb\xbb\xfb\x8c\x0d\x08\x7e\xa1\x72\xfe\x45\x94\xe3\x3a\x31\x96\x1f\x53\x19\x76\x2b\xe9\x68\x1a\x07\x5b\x25\xf9\xbd\x5b\x00\x3b\x75\x0b\x36\xf5\x07\xd6\x2f\x1a\x1d\xfd\x5c\x77\x9f\x4b\x00\xf5\x48\x67\x4f\x5e\x62\xbd\xf3\x29\xff\x3a\xcc\x49\x74\xdd\x59\x3b\xbc\x50\xb7\xdb\x14\xf2\xe9\xbe\x11\xfe\x5b\xa3\x12\x2c\xbd\x90\x61\xed\xc2\x51\xab\xf3\xf2\x49\x2a\xf4\x03\x95\xa1\x7f\xce\xf8\xcc\x3f\x42\x34\xfc\x9c\x3c\x9e\xfc\x37\x00\x00\xff\xff\x6a\x32\x89\xc7\x5d\x39\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/api.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}

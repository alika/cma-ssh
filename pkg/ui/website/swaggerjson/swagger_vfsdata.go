// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Swagger statically implements the virtual filesystem provided to vfsgen.
var Swagger = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/api.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "api.swagger.json",
			modTime:          time.Time{},
			uncompressedSize: 15907,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x6f\xdb\x38\xf6\x7f\xcf\xa7\x38\xd0\xff\x0f\xec\x2e\x90\xd8\x9d\x79\x5a\xe4\x65\x37\x70\xb2\xad\x31\xad\x13\xc4\xe9\xf4\x61\xa7\x30\x68\xe9\x58\x62\x23\x91\x2a\x2f\xf6\x18\x8b\x7c\xf7\x05\x2f\xb2\x2e\x96\x6c\xc5\x6e\xda\x78\x66\xe7\x65\x1a\x91\x3c\x3c\x97\x1f\xcf\x8d\xf4\x7f\xce\x00\x02\xb9\x22\x71\x8c\x22\xb8\x84\xe0\xe7\xc1\x9b\xe0\xdc\x7c\xa3\x6c\xc1\x83\x4b\x30\xe3\x00\x81\xa2\x2a\x45\x33\x3e\x4a\xb5\x54\x28\xe0\x03\x61\x24\x46\x01\x57\x77\x63\x98\x4e\xdf\x41\x2e\xf8\x92\x46\x28\xec\x62\x80\x60\x89\x42\x52\xce\xcc\x92\xe5\x9b\xc1\x4f\x9e\x2a\x40\x10\x72\xa6\x48\xa8\x36\xa4\x01\x02\x46\x32\x4b\x7b\x4a\x32\xa9\x59\x0c\xa3\xc9\xe8\xc1\x4f\x07\x08\xb4\x48\xcd\x60\xa2\x54\x2e\x2f\x87\xc3\x98\xaa\x44\xcf\x07\x21\xcf\x86\xd2\xcd\xbf\x08\x59\xa8\x86\x61\x46\x2e\xa4\x4c\xca\x75\x98\x11\x6a\x57\xfa\x69\x83\x30\xe5\x3a\x62\x44\xd1\x25\xfe\x33\x36\x83\x86\x48\x60\xa7\x3f\x9d\x01\x3c\x59\xb1\x65\x98\x60\x86\x32\xb8\x84\x7f\x3b\x7e\xed\xbe\x05\xf3\xe6\x0f\xb3\xe2\xb3\x9d\x1b\x72\x26\x75\x6d\x32\xc9\xf3\x94\x86\x44\x51\xce\x86\x5f\x24\x67\xe5\xdc\x5c\xf0\x48\x87\x3d\xe7\x12\x95\xc8\x52\xf7\x43\x92\xd3\xe1\xf2\xa7\x61\xe8\x54\x5f\xd5\x5c\x8c\x55\x45\x1a\xf6\x75\x96\x11\xb1\x36\x62\x7f\xa2\x69\x0a\x02\x95\xa0\xb8\x44\x50\x09\x82\x54\x44\x69\x09\x7c\x01\x04\x3c\x31\x20\x2c\x02\xaa\x24\x3c\xea\x39\x86\x9c\x2d\x68\x0c\x0b\x2e\x20\xe4\x8c\x61\xa8\xe8\x92\xaa\xf5\x46\xa5\x00\x01\xcf\x51\x58\x96\xc7\x91\xd9\xe3\x2d\x2a\x0f\x88\xea\x24\x81\x32\xe7\x4c\xa2\xac\xf1\x06\x10\xfc\xfc\xe6\x4d\xe3\x13\x40\x10\xa1\x0c\x05\xcd\x95\x47\xcb\x15\x48\x1d\x86\x28\xe5\x42\x1b\xf6\x1d\xa5\x41\x85\xbc\x93\xd3\x98\x89\x6c\x11\x03\x08\xfe\x5f\xe0\xc2\xd0\xf9\xbf\x61\x84\x0b\xca\xa8\xa1\x2b\x0d\x3a\xa4\x4c\x4a\x76\xef\x31\x4f\xd7\x41\x6d\xed\xd3\x59\xdb\xbf\x9f\x2a\x72\xe5\x44\x90\x0c\x15\x8a\xd2\x8a\xee\xbf\x86\x44\x05\x9e\xed\xff\xcf\x77\x4a\x3b\x21\x19\x1a\x83\x18\xf3\x14\x26\x51\x1c\xe6\x08\x29\xe7\x8f\x18\x81\xce\xb7\x64\xa7\x76\xe5\x57\x8d\x62\xdd\x1c\x12\xf8\x55\x53\x81\xc6\x36\x0b\x92\x4a\x6c\x0c\xab\x75\x6e\x19\x93\x4a\x50\x16\x07\xad\x02\x7f\xae\x08\xac\x48\xdc\x14\xb5\x70\x00\xe5\xe2\xcf\x67\x0d\x4d\x05\x11\xa6\xa8\x70\x37\x30\xdd\x9c\x12\x88\x3b\x40\x76\x6d\xa7\x9e\x12\xce\x6a\x1c\xbf\x16\xa8\x7d\x4a\x88\x02\x2a\xab\x50\xfb\x8b\x04\xb3\xd0\x20\x2e\x42\xa9\x04\x5f\x9f\x1e\xd8\x72\x2e\xf7\xf8\x40\x1b\x9a\x4c\x30\xea\x85\xb6\x91\x40\x72\x5a\x68\xab\x71\xfc\x5d\xd0\x36\xe7\xd1\x16\x1a\x1c\x50\xda\x46\x2a\x38\x51\x42\x37\x61\xf2\x0d\x64\xfe\x20\xe3\x3e\x12\x7f\x0b\xb0\xe9\x3d\x58\x23\xd1\x17\x2d\x15\x90\x67\x82\xee\xca\x2e\xf3\x0c\x4c\x78\x84\xf2\x24\x90\x57\x63\xfb\x4f\x82\xbc\x9a\xcc\x2f\x8e\xbc\xb3\x8a\xc2\x9a\x89\xe0\x30\xa5\x35\xd7\xf7\x8c\x6c\x90\x80\x59\x6b\x12\x0f\x4f\x4b\xf6\x4a\xf2\xde\x9b\x0d\x4f\x01\x98\x75\x96\x0f\x42\xe6\x37\xb4\x93\xce\x63\x41\x22\x7c\xae\xa9\xb4\x60\xe0\x97\x02\xb7\x6a\x93\x36\x37\x27\x10\xd3\x25\xb2\x1e\x6e\xe5\x2d\xaa\x8f\x8e\x80\xe7\x7c\xcc\x16\x5c\x64\x76\xc6\xa9\xd8\xb1\x53\x80\x57\x9c\x57\x81\x32\xdf\x56\x08\x44\xa0\x29\xa5\xa4\xa9\x8c\x29\x73\xa5\x95\x37\xe9\x09\x66\x5a\x7b\x83\x9f\x52\x98\xe5\xca\xa4\x93\x05\x6e\xfb\x04\xbf\xba\x85\x4f\x02\x97\x75\x96\xff\x24\x91\xaf\x2e\xf4\x8f\x09\x7d\x65\x5b\xe9\xd9\xae\xd4\x2f\x05\x5a\xba\x10\x20\x73\xae\x15\x90\x9c\x82\x44\xb1\xdc\xe7\x4b\x7f\x75\x14\x4e\xd0\x89\x7a\xce\xbf\x5b\x20\xdc\xb4\xd3\x2a\xdc\x94\x0d\xad\x66\x0a\x35\x95\xc9\x3d\x66\x7c\x89\x1f\x48\x98\x50\x86\xd3\x1c\xc3\xaa\x85\x0b\xff\xc6\xe7\x5f\x30\x2c\x13\x90\x20\x17\xc6\x46\x8a\x36\x54\x1e\x24\xcd\x92\x70\xdb\x47\x9e\xd7\xc6\x8a\xe6\xe6\x43\x82\x60\x16\x5b\x3f\x3d\x9d\xbe\x03\x62\x6d\x52\x8a\xf9\xd4\x0a\xce\x86\x82\x5b\x60\x72\x84\x30\x31\x55\xb3\x6d\xd4\x3f\x4f\x26\x45\x62\xe0\xcc\x46\xa8\x98\x2a\x10\x98\x73\x49\x15\x17\x15\x2c\x54\x2d\x6e\xb6\x0c\x79\x96\xd1\x23\xb4\x48\x64\x52\xf4\xb5\xcc\x96\x9e\x5c\xe7\x76\x4a\x20\xce\xa4\x22\x8d\xb6\x51\xdf\x2d\x3f\x25\xa8\x12\x14\xc0\x05\x30\xae\xec\xae\x86\x22\xac\x88\x84\x30\x45\xc2\x60\x95\x20\x83\xb9\xa6\x69\x07\x13\x66\x28\x9a\x45\x87\x32\x70\x4d\x94\xed\xe3\x59\x32\x1d\x62\xf2\xa3\xec\xe8\x51\x65\x36\x89\x39\x68\x89\x91\x89\xb3\x21\xcf\x72\x9a\x62\xfb\x8e\x7e\x50\x1c\xb4\xdf\xc8\x2f\xb6\x5b\xb5\xd3\xcf\x53\xa2\x0c\xc6\x0f\xa2\x7f\xe7\x17\x03\x55\xce\x4c\x6e\xbf\xc8\x9e\xbd\x21\x08\xcd\x98\xc9\x98\x5c\x5f\xdc\xef\xdd\x7a\xfa\x3a\xca\xb2\x23\x8e\x9c\x0f\xb9\x87\xc0\xf0\xa0\x54\xb0\x5d\xbb\x24\x8a\x66\xcc\xb6\x02\x3a\x58\x21\x42\x90\x7a\xe0\x0f\xa8\xc2\xac\x39\x7f\x4f\x74\x98\xca\xa4\xea\x76\xab\xe1\xa0\x5d\x48\x3f\x5b\xc2\x2a\xa1\x61\x62\x44\x5b\x11\x66\x93\x3e\x12\x59\x4c\x56\xa4\x6f\x97\x4c\x58\x67\xff\xb2\xc2\xf5\x8a\x31\xc7\x08\xeb\x84\x80\x85\xe0\x59\x87\xc4\x7d\xd1\xea\xa2\xf2\x11\x78\xe5\x8f\x5d\x5a\x9c\x73\x6e\xbc\x5f\x5d\x8f\x2e\x2c\x75\x0e\x97\x68\x26\x06\xc9\x54\x02\xa9\x27\x27\x5f\x35\x4a\xd5\x4f\x4e\x2f\xe1\x35\x2a\x42\xd3\xb1\xc2\xec\x18\x31\x69\x74\xd0\xa1\x1c\x5f\x37\x2e\x58\xda\x41\x79\xf0\xa1\x6f\xb9\xc2\x69\xdf\xc1\x5d\xbf\xcd\x32\x94\x92\xc4\x87\xed\x75\x15\x45\x16\xdf\x24\x6d\x49\x63\xeb\x57\x7c\x7b\xd9\x29\x6f\xfc\x8e\xf6\x75\x95\xcb\x43\x1b\x93\xec\xdd\x61\x2f\x57\xe0\xf8\x6d\x32\xb0\xb3\xf3\xeb\xc8\x4d\xdd\xc2\xee\x0c\x64\x9f\x26\xf6\xa3\xf6\x7f\x78\x7d\x55\x78\x7d\xcd\x50\x99\x36\x79\xeb\x52\x4f\x80\x4c\x67\xb5\x6a\x2a\x98\x3e\x5c\x3d\x7c\x9c\xce\x3e\x4e\xa6\x77\x37\xa3\xf1\xbf\xc6\x37\xd7\xd5\xaa\xf2\xee\xfe\xf6\xd7\xf1\x74\x7c\x3b\x19\x4f\xde\x56\xbf\xdf\x7f\x9c\x6c\x7d\xba\x19\xdd\x4e\x46\xe3\xf7\x8d\xcf\xd3\x87\xdb\xbb\xbb\xc6\xb7\x9b\xfb\xfb\xdb\xfb\xea\x87\xeb\x9b\xb7\xf7\x57\xd7\x37\xd7\x85\xd4\x9f\x2b\x97\xb9\x0b\xa2\x53\x1b\x2e\x76\x70\x5a\x2a\xf4\x02\xb6\xa7\x5d\xc2\x84\x2b\x90\xa8\x7e\x63\x70\x01\x55\x91\x2e\xc1\x18\xa0\xfa\xc5\x5a\x03\x81\xb2\x88\x86\x44\x61\x3d\x99\xa2\x12\xe6\x68\xb2\xa7\xd0\xde\xff\x44\x03\x4b\xd0\xeb\xc2\xd1\xf2\x7f\xec\x24\x93\x10\x43\x07\x59\x41\xc6\xbd\x82\x90\xb0\xd0\x69\xba\x06\x2d\xc9\x3c\x45\x4f\xba\xd4\xa9\x27\x5f\x7e\x68\xd9\x82\x28\x90\x3c\x43\x58\x71\xf1\x68\x08\x92\x50\xd1\x25\xa6\x6b\xcf\x75\xc4\x19\x16\x85\x98\xe7\xe5\xdc\xc4\xd6\x04\x88\xf4\xc9\xa0\x99\x66\x86\x33\x62\x39\xb5\x05\x4d\x84\x20\xf9\x42\xad\x88\xf0\x5c\x15\x26\x75\x2c\x15\x7f\xf5\xd3\x9c\xbb\x78\x8f\x2c\x1d\x0b\x03\x47\xc4\xfe\x73\x27\x85\x8c\x18\x31\x40\x33\xa7\x1f\x4b\xa0\x80\x8d\xa3\x51\xfc\xb5\x93\x8c\xef\x4c\x49\x53\x57\x08\xab\x20\xa3\x10\x93\x4f\x49\xc5\x05\x5a\x1b\xc0\x42\xb3\xd0\xf9\x0d\xaa\x7c\x91\xda\x38\x77\xcd\xfb\xbf\x1f\x91\xee\x77\x3f\xde\xd8\xdc\xfe\x75\x95\x4e\x8f\x7f\x97\x87\x54\x83\x8d\xae\x91\x51\xfa\xb2\xac\x0b\x7f\xd1\x73\x14\x0c\x8d\xc6\x4d\x75\x61\x40\x88\x0e\x3f\x72\x00\x23\xce\x94\xe0\x29\xe4\x29\x61\x9b\x55\xd2\x96\x25\x11\x2a\x14\x19\x65\x18\xc1\x7c\x6d\xa5\xa9\x24\xc9\x83\x76\x01\x12\x1a\x27\x33\xb2\x24\x34\x25\x73\x6a\xad\xf4\x22\x29\xe8\x76\x5d\x5f\x01\xf4\xbb\xab\x8e\xd0\x88\xca\xc8\x3e\x5b\x90\xb9\xa0\xe1\xc1\x3d\x0c\xb7\xdc\x5b\xb4\xbb\x0a\x0e\x9d\x62\x67\x56\xb1\xa7\x50\xb1\x99\x4a\x5b\x50\x89\xfb\x43\xae\x43\xd0\x1f\x4b\x26\x92\xd3\x19\xb2\x28\xe7\x94\x1d\xda\xde\xa2\x12\x64\xc2\x75\x1a\x19\x60\x10\x58\x92\x54\x23\xa4\xf4\x11\x81\xe6\x97\x39\x17\xca\x17\xfd\x34\x4d\xfd\x0c\x2a\x94\x26\x29\x8c\xef\x86\x66\xf8\x37\x76\x47\xa4\x34\xa7\x8d\x84\x8f\x06\x5f\xf8\xbb\x42\x61\x92\xa4\x50\x4b\xc5\x33\x14\xd2\xa3\xce\x38\x5a\xdf\xe6\xc9\x34\xb3\xde\xb4\x57\x5a\x9d\x0b\xba\x24\x0a\x67\x8f\xd8\x79\x2e\x77\x37\x67\xdc\x7a\x78\xc4\xf5\xa6\xd5\x24\x65\x02\x94\x29\x0e\x99\x57\x7d\xcf\x0c\x69\xfb\x75\xca\x2b\x2c\x75\xbb\xfd\xcc\x8a\xc8\xaa\x3b\x77\x1e\x92\xca\x96\x3a\xb8\xea\x13\xb6\x9e\x6a\xee\x3d\x01\xd5\xa2\xa3\xdb\x27\x45\xb6\x92\x6e\xe6\xaa\x05\x33\x9b\x9b\x83\x7e\xa6\x69\x79\xa6\xf6\xfa\x4c\x33\xb2\x07\xad\x2a\xec\x1c\x8b\xd7\x6a\x5d\x2e\xb9\xbd\x54\xe8\x85\xfc\x69\xad\x16\x78\x56\xb3\xa3\xed\xd1\xc1\xeb\xd3\xe7\xb8\x91\x17\xba\x6c\x54\xae\xa5\x01\xde\x2e\x30\xbf\x70\x04\xa8\xe2\x7f\xbf\xfb\x7f\xdf\x7c\xbe\xf2\x4c\x0b\xfd\xe1\xac\x73\x80\xab\xa9\x74\xe5\xfa\x6a\x6f\xcf\x63\x8c\xd7\xa7\xcf\x11\x61\x4d\xdf\xe1\x9b\xee\x1d\xae\xa3\x48\x8c\x8f\x07\xfb\x8e\x57\x19\x3b\x3a\x6a\xb5\xc4\x3c\xe7\x52\x52\x93\x02\x08\x1a\x27\x0a\x18\x5f\xf5\xb6\x54\xed\xc6\xf7\xf5\xd9\x65\xbc\x80\xcd\xfd\xba\x0d\xb1\xb7\xbf\xec\xb4\xc7\x8c\xb6\xde\xa6\x42\x37\xd4\xf7\x5f\xca\xee\xbe\x67\xab\xce\xdc\x56\xfa\x76\xdf\xc3\xee\x62\xeb\xae\xa2\x22\xab\x05\x8f\xba\x81\xca\x4a\xed\x3d\x99\x63\xfa\x43\xaa\x57\x93\x4e\x30\x5f\xc1\x12\x48\x2d\x1f\xed\x26\x30\xf9\xed\xc1\x5b\xb8\xec\xb8\x75\x8f\x1d\x08\x2e\x15\xf4\x40\xea\x89\xfa\x8f\x52\x90\xb2\x7c\xbc\xac\x82\x76\xec\x81\x8b\x05\x86\x5b\x05\xcb\x2e\x2f\xdf\x50\xe1\x8d\x23\xd0\xcd\x87\xdb\xa1\x9d\x91\xfe\x96\xba\x69\xf2\xf9\x8c\x4e\xe8\x84\x4f\xc3\x04\x23\x9d\x62\xad\x03\x2a\x70\x81\xa2\x7d\x6c\xc2\x6f\x7e\xc7\x50\x2b\xdc\xd9\xb7\x6c\x59\xdb\xec\xa4\xc0\x05\x94\xb3\x2e\xe1\x9a\xdb\x3a\x80\xa4\x29\x5f\x01\xc3\x15\xe4\x3c\xb2\x35\x99\xf4\x53\x80\x33\x5f\x87\xd9\xf6\x9c\x66\x29\x4a\x1b\xba\xd7\xa0\x78\x6a\x1c\x9b\x2b\x45\xad\x22\x5d\xd3\xae\x29\xc7\x25\x5c\x95\xef\xe5\xcc\x6e\x1b\xda\x9b\x0d\x5b\x37\x61\x1c\xb8\x2d\x56\xec\xc7\x15\x55\x89\x6d\xa6\x9b\x8d\x6c\xcb\xd1\xf5\x64\x8a\x06\xe6\x46\x43\x97\x70\xb3\xa4\xa1\x02\xc2\xd6\x40\x52\x81\x24\x5a\x5f\x14\x97\xec\x4e\x3a\x13\x7e\x22\xc7\x4a\x8b\x0c\x6d\x6e\xac\x51\xb5\x1f\x71\x48\xb5\x34\x05\xf0\x11\x07\xb5\x20\xd0\xfd\x74\xa7\x02\x1b\xeb\x88\x5e\x38\x9f\x6d\xba\xf8\xfd\xf1\xdf\x88\xe1\x38\xb3\x42\xb8\x2e\xf0\x56\xa9\x5d\x11\xc3\x1a\xe6\xbb\x89\xf1\x50\xf7\x09\xbb\xc5\xf0\xe9\xf9\x63\xd9\x91\xf4\xcc\xb6\x0a\x42\x99\x54\x84\x85\xf8\xe0\x58\x3f\x00\x01\xeb\xdc\xba\x50\xaf\x2f\x73\xa2\xca\x1f\x60\xfc\x55\x66\x24\x4d\xcf\x21\xc3\x88\xea\xec\x1c\xe2\x5c\x9f\xc3\x60\x30\xf8\x5b\xaf\xb8\x6e\x2f\x88\x72\x0c\xe9\xc2\xff\x58\xd3\xbf\xc1\x2e\xbe\xd9\x63\xd8\x76\x38\xb6\x9f\x4b\x9e\xfc\x93\x94\x63\xde\x2f\x55\xb3\x5b\xbb\xf3\x0a\xab\x57\x1e\xfc\x1f\xfd\xc2\x4d\xdb\xcb\xdb\xd7\x97\xde\x1e\xf6\x74\x62\xf3\x6a\xb2\xe8\x07\x5e\xf3\xb0\xf2\x6c\xb2\x11\xb2\x3e\x70\x81\xfe\x26\xb5\xef\x8f\xb2\x9f\xf9\x53\x6a\xc3\xcf\xd9\xd3\xd9\x7f\x03\x00\x00\xff\xff\x3b\x9d\xfe\xfa\x23\x3e\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/api.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}

// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Swagger statically implements the virtual filesystem provided to vfsgen.
var Swagger = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/api.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "api.swagger.json",
			modTime:          time.Time{},
			uncompressedSize: 19135,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x18\xe8\x0e\xb8\x3b\xa0\x4d\xba\xbd\x97\x22\x2f\x77\x81\x93\xed\x1a\xdb\x38\x41\x9c\xb6\x0f\xd7\xc2\xa0\xa5\xb1\xcc\x8d\x44\x6a\x49\xca\x39\xe3\xd0\xef\x7e\x18\x4a\xb2\xa8\x7f\xb6\x6c\x37\x89\xbd\xdd\xbe\xb4\x95\xc8\xe1\xfc\xf9\x71\x38\x33\x1c\xf9\x7f\x27\x00\x9e\x7e\x64\x61\x88\xca\x3b\x07\xef\xed\xe9\x1b\xef\x15\x3d\xe3\x62\x26\xbd\x73\xa0\xf7\x00\x9e\xe1\x26\x42\x7a\x3f\x88\x52\x6d\x50\xc1\x35\x13\x2c\x44\x05\x17\xb7\x43\x18\x8f\x7f\x81\x44\xc9\x05\x0f\x50\xd9\xc9\x00\xde\x02\x95\xe6\x52\xd0\x94\xc5\x9b\xd3\x9f\x72\xaa\x00\x9e\x2f\x85\x61\xbe\x59\x91\x06\xf0\x04\x8b\x2d\xed\x31\x8b\x75\x2a\x42\x18\x8c\x06\xf7\xf9\x70\x00\x2f\x55\x11\xbd\x9c\x1b\x93\xe8\xf3\xb3\xb3\x90\x9b\x79\x3a\x3d\xf5\x65\x7c\xa6\xb3\xf1\xaf\x7d\xe1\x9b\x33\x3f\x66\xaf\xb5\x9e\x97\xf3\x30\x66\xdc\xce\xcc\x87\x9d\xfa\x91\x4c\x03\xc1\x0c\x5f\xe0\xbf\x43\x7a\x49\x44\x3c\x3b\xfc\xdb\x09\xc0\x37\x2b\xb6\xf6\xe7\x18\xa3\xf6\xce\xe1\x3f\x19\xbf\x76\xdd\x82\x79\xfa\x0f\xcd\xf8\x6a\xc7\xfa\x52\xe8\xb4\x32\x98\x25\x49\xc4\x7d\x66\xb8\x14\x67\xbf\x69\x29\xca\xb1\x89\x92\x41\xea\xf7\x1c\xcb\xcc\x5c\x97\xba\x3f\x63\x09\x3f\x5b\xfc\x74\xe6\x67\xaa\x77\x35\x17\xa2\xab\x48\x62\x3f\x8d\x63\xa6\x96\x24\xf6\x67\x1e\x45\xa0\xd0\x28\x8e\x0b\x04\x33\x47\xd0\x86\x99\x54\x83\x9c\x01\x83\x9c\x18\x30\x11\x00\x37\x1a\x1e\xd2\x29\xfa\x52\xcc\x78\x08\x33\xa9\xc0\x97\x42\xa0\x6f\xf8\x82\x9b\xe5\x4a\xa5\x00\x9e\x4c\x50\x59\x96\x87\x01\xad\xf1\x1e\x4d\x0e\x08\x77\x90\x42\x9d\x48\xa1\x51\x57\x78\x03\xf0\xde\xbe\x79\x53\x7b\x04\xe0\x05\xa8\x7d\xc5\x13\x93\xa3\xe5\x02\x74\xea\xfb\xa8\xf5\x2c\x25\xf6\x33\x4a\xa7\x0e\xf9\x4c\x4e\x32\x13\x6b\x10\x03\xf0\xfe\xaa\x70\x46\x74\xfe\x72\x16\xe0\x8c\x0b\x4e\x74\x35\xa9\xb0\xe4\xf5\x0e\x93\x68\xe9\x55\x26\x7e\x3b\x69\xfb\xf7\x37\x47\xa8\x84\x29\x16\xa3\x41\x55\x9a\x30\xfb\x53\x13\xa7\x00\xb3\xfd\xfb\xd5\x5a\x51\x47\x2c\x46\xb2\x06\xd9\xa6\xb0\x87\x91\x30\x45\x88\xa4\x7c\xc0\x00\xd2\xa4\x21\x38\xb7\x33\x7f\x4f\x51\x2d\xeb\xaf\x14\xfe\x9e\x72\x85\x64\x98\x19\x8b\x34\xd6\x5e\x9b\x65\x62\x19\xd3\x46\x71\x11\x7a\xad\x02\x7f\x75\x04\x36\x2c\xac\x8b\x5a\xec\xfe\x72\xf2\xd7\x93\x9a\xa6\xbc\x00\x23\x34\xb8\x1e\x95\xd9\x98\x12\x85\x6b\x10\x76\x69\x87\x1e\x0d\xc8\x2a\xec\x1e\x0a\xce\x3e\xcf\x99\x01\xae\x5d\x9c\xfd\x4d\x03\x4d\x24\xb8\x05\xa8\x8d\x92\xcb\xe3\x43\x5a\x22\xf5\x06\xef\x67\x0f\x25\x3a\x86\x7a\x41\x6d\xa0\x90\x1d\x11\xd4\x2a\xec\x3e\x0b\xd4\xa6\x32\x68\x40\x21\x43\x49\xdb\x1b\x07\x24\x46\xa5\x75\x8c\xec\x2b\xf0\xb5\x0e\xfb\x88\xbb\x3b\xcc\x4e\x1c\x6d\xd5\x8f\xe0\xb3\x88\x57\xa0\xb7\xc5\x39\xcc\x80\xe6\x92\xd7\xcf\x69\xe9\x5e\xc7\xeb\x07\x5a\xf0\xe0\x21\x59\xe5\x77\x27\x4c\x7e\x47\x23\x09\x19\xa0\xce\x62\x9e\xad\x6c\x15\xa2\x59\x1d\xc7\x96\x46\x11\x38\x51\x60\xc4\x4a\xa7\x82\x41\x0f\xa7\x52\xaa\x64\x44\xa4\xc6\x19\x3b\x47\x64\x49\x87\xed\x67\x71\x32\xb9\x4a\x47\xdb\x1d\x6b\xc2\x09\xa5\x06\x65\x28\x65\x4f\xaf\xa3\x39\xd9\xd6\xa2\x39\x91\x32\x72\x61\xbc\x55\x9c\x45\x30\x06\xa2\x00\x33\x25\xe3\xad\x41\x9c\x45\x35\x84\x84\x5b\xe2\xe2\xe0\xd1\x5b\xe5\xf7\x80\x61\xeb\x44\xfd\xb9\xad\x56\x96\xd2\xcf\x03\xdb\x57\x3d\x22\x4c\x19\xe0\x84\x58\x9a\xd0\x13\xbd\xcd\xae\x5c\xc1\xce\xce\x2c\xc5\x7c\x02\xd9\x98\x52\xac\x19\x9d\x18\x8c\xeb\xd0\xdc\xa0\x91\x9a\x4e\x6c\x9a\x1f\x45\x94\x0b\x4b\xf1\xb3\x54\x31\xa3\xd3\xc3\x8b\xd3\xc8\xf0\x17\x8c\x6c\x59\x10\x38\xda\x35\x72\xeb\x2d\x7d\x11\x04\xc7\xb3\x9f\x1d\x66\x7f\x84\x40\xd7\x11\xf7\xc9\xc3\xdc\x12\x73\xe9\x06\xc8\x69\x9f\x45\x59\x1d\x49\xa4\xf1\x14\x15\x1d\xb7\x31\xf3\xe7\x5c\xa0\x06\x2e\xaa\xa7\xcc\x0e\x91\xd2\x98\xe8\x1f\x0f\x26\x2b\xec\xfe\x08\xa8\xac\x08\xfc\xb2\xe9\x57\x9a\x84\x8a\x05\xb8\x6d\x06\x96\x2a\x01\xf9\x54\x90\x16\x21\x45\x4c\x1f\xf2\x05\x8a\x7e\xd1\xfc\xc7\x8c\x40\xce\xf9\x50\xcc\xec\x99\x40\x68\x3b\x78\xc8\xae\xe3\xfe\x80\x6b\x55\x60\xe8\xd9\x23\x02\x53\x08\xbe\x14\x9a\x07\x48\xa7\xb6\xb5\x5d\x6e\xcf\xa3\x89\xf1\xfb\xfb\x5b\x66\x0c\xc6\x89\xa1\xc3\xbd\x00\x6d\x9f\x2a\x56\xd5\xc2\x87\x0f\xca\x2a\xbf\x3f\x82\x23\xad\x4a\xfc\x32\x9e\xb4\xbc\x9e\xdb\xda\x83\xe6\x53\x81\x97\xce\x03\xd8\x54\xa6\x06\x58\xc2\x41\xa3\x5a\x6c\x72\xa1\x9f\x32\x0a\xc7\xe6\x3b\x73\xb6\x9f\xad\xac\xb5\xba\x93\x74\x58\x29\x6f\x05\xbb\x2b\x34\xd7\x59\x50\x36\x6e\x54\xbe\x0a\xcf\x26\xa7\xbf\xa1\x5f\x96\x13\xbd\x44\x91\x8d\x0c\xaf\xa9\xdc\x7b\x78\xa7\x89\x76\x83\x10\xb4\xb8\xc9\x57\x95\x77\xc5\x6d\x31\x4d\x87\x87\x77\x45\x05\xcd\x6b\xd5\xcd\xc3\x3b\xfd\xa9\x01\xc7\xfe\x6b\xfc\x9a\x4e\x51\x09\x34\xa8\xa1\x20\xd3\xba\x4c\xcc\x98\x1e\x2f\xb5\xc1\xd8\x02\x71\xfb\x85\xae\x19\x1b\x83\x95\x48\x5b\x32\x13\x1e\x74\xaf\xf4\x8b\xd4\x26\xf7\x37\xfb\xac\x34\x2f\xc8\x74\x2e\xb4\xa7\x85\xec\x52\x36\x70\x5f\x67\x22\x5a\x68\x78\x7b\x11\x04\x6a\xf7\x45\x86\xb7\x40\x04\x50\xbb\x6b\x34\x8e\xc5\xd5\x9c\xfb\xda\x85\x75\x9e\x6a\x78\x15\x77\x56\xdb\x95\x2d\x8e\x65\x0f\xf8\x87\xdc\x4c\x9a\x7e\xb2\xbf\xd4\x24\x81\x61\x21\x48\x61\xa3\x99\x90\x1b\x50\x98\x48\xcd\x8d\x54\xcb\x76\x3d\xd3\x92\xbe\x8c\x63\x6e\x76\x5e\x71\xce\xf4\xbc\xa8\x84\xd2\x92\x39\xb9\xce\xe5\x8c\x42\x9c\x90\xa2\x77\x83\xea\xe7\x39\x9a\x39\x25\x83\x0a\x84\x34\x76\x55\xa2\x08\x8f\x4c\x83\x1f\x21\x13\xf0\x38\x47\x01\xd3\x94\x47\x1d\x4c\xd0\xab\x60\x12\xec\xca\xc0\x25\x33\xb6\xf2\x6b\xc9\x74\x88\x29\xf7\xb2\x63\x8e\x2a\x5a\x24\x94\x90\x6a\x0c\x28\x26\xf3\x65\x9c\xf0\xa8\x63\x63\xe6\x2f\x77\xdb\x2d\x83\x7c\xb2\x5d\xaa\x9d\x7e\x12\x31\x43\x18\xdf\x89\xfe\x6d\x3e\x19\xb8\xc9\xcc\x94\xad\x17\xd8\x78\xfa\x0c\x54\x2a\x04\x45\xd7\x15\x3f\xda\x1a\x4c\x34\x4b\x15\x7b\xec\x36\xb7\x80\xba\x1b\x10\x5b\xcb\xaa\x95\x42\x99\x06\x23\xdb\x15\xfa\x28\xd5\x03\xaa\xc9\xaa\xd4\xd9\xe9\x4c\x9b\x65\xc6\x8e\x22\x63\x77\x28\x51\x9c\xcf\x09\xfa\x9d\xa5\xd8\x9a\x5c\xd7\x45\x9d\x25\x97\xc8\x48\x57\xce\xed\xec\x94\xc5\x2f\x7b\x58\x4a\x3e\x74\x29\x67\x2a\x25\x6d\xf9\xaa\x7a\x66\xab\xa2\x69\xeb\xeb\x75\x9e\xa4\x2c\x28\x11\x4e\xdd\x72\xd2\x74\x09\x66\xce\x35\x50\x70\x8e\xda\xf4\xd0\x40\x1e\x2c\x5d\xa2\x61\x3c\x1a\x1a\x8c\xf7\x51\xc1\xce\x27\x7b\x4b\xcb\x4f\x3b\x20\xb3\xa3\x6f\x12\xa3\xd6\x2c\xdc\x6d\xad\x8b\x20\xb0\xa0\x63\x51\x4b\xac\x5e\xed\x07\xdb\xc8\x4e\xd9\x1e\xb6\xf7\xe6\x74\x3a\xcd\xac\x1b\xb5\x8d\x66\xdd\x88\x6e\xe8\xa4\xce\x40\x77\xbf\x40\x46\xab\x71\xe5\xda\x1d\x65\x6c\xb7\xa7\x8a\x22\xca\x9f\x58\xda\x0e\x4b\x87\x69\xc6\xee\x74\xa9\xa6\x18\x0f\x45\x1a\x57\x72\x39\x6f\x7c\x7f\x71\xff\x71\x3c\xf9\x38\x1a\xdf\x5e\x0d\x86\x3f\x0f\xaf\x2e\xdd\x84\xf6\xf6\xee\xe6\xd3\x70\x3c\xbc\x19\x0d\x47\xef\xdd\xe7\x77\x1f\x47\x8d\x47\x57\x83\x9b\xd1\x60\xf8\xa1\xf6\x78\x7c\x7f\x73\x7b\x5b\x7b\x76\x75\x77\x77\x73\xe7\x3e\xb8\xbc\x7a\x7f\x77\x71\x79\x75\x59\x88\xbc\xaa\x18\x50\xfe\xc8\xd2\xc8\xba\xe0\x35\x9c\xd6\x53\xe9\x8a\x5e\xbe\x08\x3a\xae\xf8\x8c\xa3\x06\x3f\x55\x0a\x45\xd9\x23\x61\x83\xc7\xd3\x2f\xe2\x8b\x80\xd7\xd0\x5c\xe0\x1c\x46\xd2\x80\x46\x63\xdf\xbb\xca\x38\x87\x7b\xe7\xb0\xe6\x1a\xa6\x48\x81\x87\x6f\xfb\x7c\x82\x53\x3b\x3e\x57\x52\x75\xe8\x9c\xd1\x58\x14\xc5\xd0\xac\x8b\x55\xc3\x2c\x8d\xa2\x25\xa4\x9a\x4d\x23\xcc\xa7\x97\x0a\x3d\x87\xb1\x8c\x11\xe8\xa4\xa7\xb1\xcc\x37\x7c\x81\xd1\x32\x5f\x34\x90\x02\x8b\x48\x3d\x5f\xe6\x15\xe8\xd4\x9f\x03\xd3\x79\xfd\x8d\x86\xd1\xeb\x98\x59\x26\xa4\xca\xf3\x26\x39\x33\x8f\x4c\xe5\x0b\x16\xa6\xea\x90\x2d\xbb\xfe\x0c\xec\x50\x6b\xc1\xea\xb8\x98\x11\x3f\x90\x8a\x4c\x06\x3b\xac\xb0\x6b\x75\x64\x5e\x95\xd2\x14\x24\x2a\x2b\x0c\x31\x2f\x41\xa1\x36\x52\xa1\x55\x05\xcc\x52\xe1\x67\xbb\x96\x9b\xa5\xd7\x00\xbe\x14\x46\xc9\xe8\x36\x62\x02\xdd\x98\x64\x0f\x5f\x16\xb1\x29\x3e\x69\xec\x54\x26\xfb\x1f\x68\xa9\x1e\xf1\x13\x29\x2d\x63\xcb\xc6\xb7\xd6\xbe\x99\xe0\x90\x90\xe4\xab\x3b\xac\x76\x67\xc5\x85\x36\x4c\xf8\x78\x9f\xc9\xb0\x43\x4e\xb6\x4c\xb0\x72\x55\x66\xa4\xd3\x97\xf8\x77\xa2\x1e\x30\x15\x10\x9c\xc2\x24\xfd\x47\x57\x3e\x91\x8a\xce\x94\x90\x0b\x83\x61\xa5\xe6\x56\x89\xba\xb8\x30\xff\x7c\xbb\xc6\x6f\x36\x6f\xf3\xfa\xe7\xe7\x99\x4f\xc8\x9a\xd8\xf3\xab\x14\x8d\x59\x77\xdb\x1a\x1d\xbb\x18\xac\xf7\xf4\x1d\xc8\x41\x9a\xf7\x61\x3b\x21\x67\x67\xed\x6a\x97\xdc\xb2\xe6\x6a\x49\x97\x8b\x32\xcb\x74\x2a\x5a\xa4\xd3\x2c\x37\xc9\x5a\xd1\x4e\x61\x50\x51\x6c\x3e\x4b\xdb\xbb\x91\x00\x0d\xaa\x98\xaf\xe2\x63\x04\x67\x5b\x9f\x76\x21\xcb\x92\x9b\x58\x72\x36\xff\xd9\xe2\x64\xee\x70\x20\x5d\x45\xa0\x7c\x03\x3c\xce\xb9\x3f\xb7\x59\xa7\xe2\x1a\x2b\x5a\xaf\xa0\xe6\xd8\x32\xb5\x1e\x02\xf6\xda\x59\xed\x7d\xae\x5d\x9b\xe6\x88\xd2\xb9\xc2\xca\xfd\x93\x39\x17\xa8\x8d\xaf\x5f\x36\x80\xd3\x89\xce\xbb\x9d\x5f\x60\xd3\xc1\x7a\xd4\x58\x70\xb2\xba\x41\xe8\x11\x46\xb6\x74\xfe\x1f\x9e\x51\x06\x32\x8d\x82\x8a\xa4\x53\x2c\x3e\x00\xe8\x72\x71\xed\xe1\x7a\x2f\xc7\x3a\xae\x84\xe4\xfd\x73\xf5\xb6\xfe\xbd\xc3\x53\xe6\x67\xa6\x33\xdc\xb2\xea\xa5\x53\x5f\x29\xdb\xba\xa5\x0f\x4f\xca\x61\xb5\xa4\xc6\xb3\x10\x39\xbb\x01\x59\xbb\x53\x9f\xd2\x31\xbb\x9b\x7b\xb3\x63\xfe\x50\xef\xb8\xdf\xc6\x36\x8d\xfe\xe7\x3d\x4c\xb4\x73\x71\xf3\xbe\xd6\xe2\xbc\x36\xbf\x7e\xaa\x60\x71\x40\x74\xeb\x5d\x5f\x6b\x39\x59\x85\x7d\x4f\x84\x84\xbe\x77\xa0\x9b\x21\xf2\x1e\x8d\x5e\x7d\x99\x91\x35\xfd\x73\xf7\xab\xa1\x3e\xe7\x76\x37\x37\x45\xe9\xab\x38\x4e\x28\xba\x7c\x8f\xa6\x70\x70\x5f\x84\x54\x4e\x0a\x98\x2b\xd7\xbd\x8f\x6b\x45\xe6\x1f\xce\x63\x6c\x7b\xb6\x3b\xb5\xdc\x5e\x3b\x7a\x43\xf3\xd3\xe1\x69\x72\xc0\x44\xfd\xb0\xce\x5b\x81\x3a\xce\xea\x22\x1d\xd8\x7f\xc3\xf5\x6c\x19\xaf\x95\x78\x2b\xe9\x48\x22\xb5\xe6\xd3\x08\x41\xf1\x70\x6e\x40\xc8\xc7\x7e\x66\xaa\xf4\x59\x1c\x9e\x51\x86\x33\x58\xb5\xb4\xd8\x50\xf6\xe6\xd7\xb5\xc6\x98\xf0\xd6\xeb\x68\x58\xeb\xd6\x36\xdc\x6a\xaf\xbf\xa8\x74\x47\xf6\x71\x5c\x99\x8f\xa2\x54\xb3\x48\x42\x2b\x41\x8c\x63\x9d\x7a\xf9\xe5\x25\xb2\x75\xf7\x2c\x64\x59\x69\xa7\x43\xff\x2c\x4a\x77\x5f\xc2\xce\x6e\x5f\xa3\x0b\xbb\xdf\xa9\x88\xf6\x5d\x34\x93\x15\x2a\x2d\x3f\xa0\xb1\x23\xa7\x3a\x8e\x72\xdd\x46\x31\xfe\xac\xd1\xc1\x4e\x35\xba\xce\xaa\x5c\xa3\xd5\xfb\x40\xee\xf5\x5b\x42\x60\x32\x55\xf6\x65\x82\xf3\xfd\x41\xbb\x81\x9e\xa5\x64\x54\x51\xdd\x36\x57\xfc\x95\x26\x85\x4c\xa4\x1e\x2e\xa7\xe5\x2b\x84\xc3\x3b\x31\xf7\x4d\x94\x9b\x3a\x7d\x09\xef\xda\xfd\x61\x5b\x9b\xc1\x9e\xc1\x31\x8c\x9a\x9f\xe1\x6c\x81\x9c\x66\x17\xf2\x4b\x2b\x75\x8b\x76\xff\xb5\x01\xd7\xee\x8c\x14\xe1\x0f\xad\xfc\x88\xee\xb5\x9f\xfc\xd7\xd6\x2a\xfd\x63\xed\xc6\x55\x33\x32\xfe\xd7\xa0\x12\x2c\xba\x94\xbe\xd3\x8d\x5c\xbb\xd0\xb8\x96\x0a\xf3\xe6\x80\xbe\x3f\x18\xb5\xe5\xcf\x3c\x11\x3f\x27\xdf\x4e\xfe\x1f\x00\x00\xff\xff\xf7\x94\x05\xe8\xbf\x4a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/api.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}

// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Api statically implements the virtual filesystem provided to vfsgen.
var Api = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/api.proto": &vfsgen۰CompressedFileInfo{
			name:             "api.proto",
			modTime:          time.Time{},
			uncompressedSize: 10377,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3a\x5b\x6f\xdb\x38\xd6\xef\xfe\x15\x07\x7e\xf9\xd2\x0f\xad\xdd\xa6\x33\xb3\x45\xb2\xdd\xdd\xac\x93\x69\x8d\xb6\x4e\x10\xb9\x1d\xcc\x93\x41\x4b\xc7\x32\x37\x12\xa9\x21\xa9\xb8\xc6\x20\xff\x7d\xc1\x8b\x24\x52\x17\x3b\x6d\x33\xc0\xfa\x61\x26\xd2\xb9\xf0\xdc\x78\x6e\xea\x74\x0a\x33\x5e\xec\x05\x4d\xb7\x0a\x4e\x5f\xbe\x7a\x03\x11\xc9\x65\xc9\x52\x88\x2e\x23\x98\x65\xbc\x4c\x60\x41\x14\xbd\x47\x98\xf1\xbc\x28\x15\x65\x29\x2c\x91\xe4\x40\x4a\xb5\xe5\x42\x4e\x46\xd3\xe9\x68\x3a\x85\x8f\x34\x46\x26\x31\x81\x92\x25\x28\x40\x6d\x11\x2e\x0a\x12\x6f\xb1\x82\x3c\x87\x2f\x28\x24\xe5\x0c\x4e\x27\x2f\xe1\x44\x23\x8c\x1d\x68\xfc\xec\x5c\xb3\xd8\xf3\x12\x72\xb2\x07\xc6\x15\x94\x12\x41\x6d\xa9\x84\x0d\xcd\x10\xf0\x6b\x8c\x85\x02\xca\x20\xe6\x79\x91\x51\xc2\x62\x84\x1d\x55\x5b\x73\x8e\xe3\xa2\x25\x81\xdf\x1d\x0f\xbe\x56\x84\x32\x20\x10\xf3\x62\x0f\x7c\xe3\x23\x02\x51\x4e\x68\xfd\xdb\x2a\x55\x9c\x4d\xa7\xbb\xdd\x6e\x42\x8c\xc0\x13\x2e\xd2\x69\x66\x51\xe5\xf4\xe3\x7c\x76\xb5\x88\xae\x5e\x9c\x4e\x5e\x3a\xa2\xcf\x2c\x43\x29\x41\xe0\x1f\x25\x15\x98\xc0\x7a\x0f\xa4\x28\x32\x1a\x93\x75\x86\x90\x91\x1d\x70\x01\x24\x15\x88\x09\x28\xae\x85\xde\x09\xaa\xed\xf6\x1c\x24\xdf\xa8\x1d\x11\xa8\xd9\x24\x54\x2a\x41\xd7\xa5\x0a\x6c\x56\x89\x48\x65\x80\xc0\x19\x10\x06\xe3\x8b\x08\xe6\xd1\x18\xfe\x7d\x11\xcd\xa3\xe7\x9a\xc9\x6f\xf3\xe5\xfb\xeb\xcf\x4b\xf8\xed\xe2\xf6\xf6\x62\xb1\x9c\x5f\x45\x70\x7d\x0b\xb3\xeb\xc5\xe5\x7c\x39\xbf\x5e\x44\x70\xfd\x2b\x5c\x2c\x7e\x87\x0f\xf3\xc5\xe5\x73\x40\xaa\xb6\x28\x00\xbf\x16\x42\x6b\xc0\x05\x50\x6d\x4d\x4c\x8c\xe9\x22\xc4\x40\x84\x0d\xb7\x22\xc9\x02\x63\xba\xa1\x31\x64\x84\xa5\x25\x49\x11\x52\x7e\x8f\x82\xe9\x48\x28\x50\xe4\x54\x6a\xaf\x4a\x20\x2c\xd1\x6c\x32\x9a\x53\x45\x94\x79\xd5\xd1\x6b\x32\x32\x27\xb9\x10\x9b\x2d\x66\x4b\xf8\xbb\xb4\x4f\x93\x58\x07\x1b\x33\xb1\xf6\xaf\x34\x27\x34\x9b\xc4\x3c\xff\xc7\x68\x24\xf7\x4c\x91\xaf\xf0\x16\xc6\x85\xe0\x8a\xbf\x1e\x9f\x8f\x46\x05\x89\xef\xb4\x24\x71\x4e\xa4\xdc\x9e\x8f\x46\x34\x2f\xb8\x50\x30\x4e\x39\x4f\x33\x9c\x92\x82\x4e\x09\x63\xdc\x09\x32\x31\x94\xe3\xf3\x1a\xcd\x3c\xc7\x2f\x52\x64\x2f\xe4\x8e\xa4\x29\x8a\x29\x2f\x0c\x6a\x2f\xd9\x68\x64\xa1\x70\x92\x8a\x22\x9e\xa4\x44\xe1\x8e\xec\x2d\x38\x5e\xa5\xc8\x56\x8e\xcb\xc4\x71\x99\xf0\x02\x19\x29\xe8\xfd\x69\x05\x79\x06\x6f\xe1\xcf\x11\x00\x65\x1b\x7e\x66\xfe\x02\x50\x54\x65\x78\x06\xe3\x59\x56\x4a\x85\x02\x3e\x11\x46\x52\x14\x70\x71\x33\x87\x28\x7a\x0f\x85\xe0\xf7\x34\x41\x31\x3e\x37\xe8\xf7\xf6\xfe\x9c\xc1\xf8\xfe\xe5\xe4\xd5\xe4\xa5\x7b\x1d\x73\xa6\x48\xac\x2a\xa6\xfa\xc7\x48\xae\xf9\xfa\x76\x76\xc8\xfa\x57\x8a\xec\x0c\xc6\x3a\xee\xe5\xd9\x74\x9a\x52\xb5\x2d\xd7\xda\xd6\x53\xe7\x89\x17\x31\x8b\xd5\x34\xce\xc9\x0b\x29\xb7\x1e\x1d\x6a\xa7\x9c\xc1\xf8\xa0\xc3\x1c\xfe\x83\xfe\x9f\xf9\x0f\x7e\x55\x28\x18\xc9\x56\x09\x8f\x65\x25\xe4\xf7\x88\x90\xa0\x8c\x05\x35\xf6\x3d\x83\xf1\x27\x2e\x10\xc8\x9a\x97\x0a\x1e\x65\xbe\x87\x11\x80\x8c\xb7\x98\xa3\x3c\x83\xf7\xcb\xe5\x4d\x74\xde\x7e\xa3\x5f\xc4\x9c\xc9\xd2\xbc\x19\xbb\x4b\xad\xcf\x9b\xfe\x47\x72\x66\xd8\x14\x82\x27\x65\x3c\x04\x7f\x38\x1f\x8d\x24\x8a\x7b\x1a\x63\x2d\x95\x55\x58\xdf\x55\x9a\x65\x56\x26\x93\x05\x09\xc4\x16\xc3\xc0\x45\x11\xc3\x4c\x20\x51\x58\xd1\x9d\x04\x8f\x9f\x64\xfa\x0c\x04\xaa\x52\x30\xd9\x02\xdd\x62\x91\xed\x9f\x79\xde\xaf\x63\xd5\xdc\x85\x09\x29\xe8\x44\x5b\xba\x8a\xc0\xe6\x57\x70\xa9\xe0\x0c\xc6\xe6\xba\xdc\xbf\x9a\x3a\x81\xc6\x01\xd2\x9a\x27\x7b\x8d\xf4\xff\xcd\xeb\x07\xe7\xe3\x40\x33\x81\x4a\x50\xbc\xb7\x39\x44\x2a\xa2\x4a\xa9\xf3\x6e\xad\xa6\xce\x0f\x40\x95\x84\xbb\x72\x8d\x31\x67\x1b\x9a\x9a\x14\x13\x73\xc6\x30\x56\xf4\x9e\xaa\x7d\x6d\x8a\x77\xa8\x6a\x3b\x34\x7f\x87\x46\x68\xde\x7f\xbf\x05\x52\x3c\x6c\x80\x5e\x4d\x13\xcc\x50\x61\x8f\x03\x2f\x0d\xa0\x16\x3c\x78\x0c\x65\x0f\x40\xdf\x2f\xbe\x93\xe4\x9b\x35\xa8\x7d\x45\x20\xa3\x52\x69\x3f\x39\x42\xd9\xe3\x82\x8f\x1a\xe5\x24\x7c\x1e\x72\x85\x86\x3d\xb5\x3b\xa6\x5a\xc6\x23\x1a\x69\xca\x2a\xd0\x18\x4f\x50\x56\x21\xa8\x43\x8c\x34\xd7\x0e\x93\x8e\xd7\x1a\xe1\x17\x9a\x30\xb2\x74\x27\xbd\xaf\x87\xd4\xf6\x50\x9e\x5c\x7b\xa3\x8e\xd5\xe6\xb8\x5b\x4b\xc1\xaa\x3a\x61\x4a\x8d\xc8\x4d\x82\x72\x99\x92\x14\x14\x74\x7e\x0a\xb5\x77\x7d\xd9\xdc\x43\x3f\x69\x5e\x77\x54\x76\xef\x9f\x4c\x4f\x27\xee\x11\xdd\x48\x92\x18\xc7\x42\xc1\x79\xa6\xfb\xaa\xc3\x4e\xbd\x48\x12\xed\x93\x1b\x8d\x7c\xe2\x3d\x84\xda\x78\x80\x27\xcf\xa2\x53\x2d\xe8\xf7\xa5\xd2\x3a\xc1\x34\x0a\x6f\x04\xcf\x8f\xa8\x6c\x73\x4a\xa3\x75\xf8\xdc\x97\x7f\x7e\x5c\xf7\xc1\x04\xd4\xd2\xbe\x57\x4d\x19\x93\xcc\x96\x0b\x56\xe6\x6b\x14\x3a\x0d\xe5\x24\xde\x52\x86\x12\x4c\xf3\xee\xe9\x7f\xf4\x1a\x47\x9a\x5b\xa3\x7d\xf0\x18\x2a\x1f\x80\x7e\xc0\xef\xe5\x13\xbb\xdd\x5d\xdf\xb2\x48\x05\x49\xd0\x09\x52\x65\xb0\x94\xde\x23\xeb\xcb\x5d\x9f\x2d\xba\x4b\x44\xed\x4b\x3c\x08\xed\x5c\xeb\x41\xcc\x27\x4f\x68\x4e\xc1\x63\x17\x5e\x29\xcc\x0b\xa5\xaf\x7a\x65\x91\x6e\xc5\x0d\x85\x86\x93\xf0\x39\xd4\x31\x84\x3d\xb9\xdf\x3b\x5a\x1d\x73\xfd\x83\x99\x85\x9c\x38\xb6\x76\x98\xe1\xc8\x8e\x5b\x28\x21\x2e\x85\x40\xd6\xd4\x35\x5d\x03\x70\x32\x42\x56\xe6\x21\x59\xd3\x63\x2e\xb8\x02\x89\xca\x3c\x46\xcb\x8b\xe5\xe7\x68\xf5\x79\x11\xdd\x5c\xcd\xe6\xbf\xce\xaf\x2e\xe1\x2d\xbc\x3c\xaf\x50\x97\x5b\xac\x39\x53\x09\x6b\xd4\xf3\x5c\x6c\x1a\xcb\x64\x62\x90\x6e\x6e\xaf\xbf\xcc\xa3\xf9\xf5\x62\xbe\x78\x07\x6f\xe1\x55\x2f\xe9\x96\x68\x5a\x1d\x9a\x96\xd4\xb6\x79\x12\x36\x65\x96\xed\xa1\x94\x7a\x28\xb6\xec\x6e\x3f\x2f\x1c\xa7\xd3\x9a\x53\xc4\x73\x84\x1d\x17\x77\x9a\x84\xe8\x2e\x10\xb3\xbd\x93\x25\xe1\x0c\xf5\xe0\xab\x9a\xd3\x9e\x83\x2c\xe3\x2d\x10\xe9\x42\x42\xa3\x69\x70\x4e\x8c\x2c\xdc\xd6\xfe\x7a\xcc\x76\xe7\x5e\xcd\xae\x17\xb3\xf9\x47\x7b\xf6\xeb\xc3\x06\xb0\x09\x2d\x71\x06\xbc\xbe\xb9\xb1\x54\x3f\xf5\x52\xe5\x44\xcb\x0a\x25\xb3\x6a\x1a\x94\xab\xdb\xdb\xeb\x5b\x78\x0b\x3f\xf7\x52\xb8\xa5\x81\x84\x52\xea\x8e\x38\x36\x21\xa7\x38\x08\x94\x4a\x0f\x34\xda\x6a\xb0\x29\x99\x01\x90\xac\x6a\x89\x2f\xaf\xde\xdd\x5e\x5c\x1a\x07\xfe\x72\x5e\x05\x4e\x6b\x3c\x18\xe5\x28\xa5\x9e\x89\xdb\x00\x2f\x3a\x48\x8e\xd5\x2e\xa4\x92\x48\x71\xad\x82\x97\x58\x0d\xb2\x54\x42\x5b\x43\xcf\x91\x1d\xcf\x57\xed\x05\xdf\xc0\x87\x72\x8d\x82\xa1\x42\x9b\xa5\xb4\x23\xab\xfe\x6b\x02\x33\xce\x94\xe0\x19\x14\x19\x61\x35\x95\x04\x22\x10\x12\x54\x28\x72\xca\xec\xf6\x44\x8b\xf3\xc9\xe6\x7d\x1d\xfc\x13\x5f\x82\xbb\x37\x72\x55\x1d\xe8\x07\xce\xa7\xaa\x4e\xec\xb6\x34\xde\x9a\xb5\x90\xa0\x12\x03\xd5\x62\x5f\x00\x43\xe8\x44\xba\xd1\x2f\xbc\x13\x2b\xcc\x95\xc1\x5c\xd9\xfe\xd1\x0f\x95\x47\x9c\x66\x53\x12\x16\xf6\x12\xf8\xcc\xad\x55\x0c\xd7\x95\x2e\x0e\xd2\xc6\xd3\xc3\xa8\xdf\x63\x26\x31\x79\x53\xe3\x16\xcd\xd2\xc6\xc4\xb6\x0a\xf4\xdb\x11\x19\x54\x44\x63\x4a\x6a\x37\x53\x28\x6d\x12\x58\xeb\x62\xc8\xef\x3a\x4e\x4c\x50\x11\x9a\xc9\x76\x34\x38\x52\x1d\x8f\x05\x67\xd2\x59\xcd\x95\x04\x85\x79\x8d\x68\x7c\xe1\xa9\x10\x0c\x69\x8f\x89\xb8\x8c\xf3\x3b\x4c\xa0\x2c\xfa\xe3\xad\x97\x75\xcb\x34\x73\x19\xf0\xa5\x36\x55\xc8\xbd\x54\x98\x77\x95\xf7\x55\xb9\x34\xda\x1f\x54\xa8\x3d\xbc\xf9\x1e\x21\x4a\x27\x0c\xef\xec\xff\x93\x56\x74\xc5\x21\x41\xa9\x04\xdf\x1f\xd5\xaa\x3b\x01\x36\x27\xcc\x78\x99\x25\x81\x6e\x6b\xac\x18\xbb\x0b\xda\xe7\xd7\xa8\x1e\xba\x35\xa9\x1f\x05\x4e\x10\x37\x12\x0d\xfb\xce\x4d\x76\xf0\xe7\x30\xf8\x87\x7c\xe0\x88\x3e\xf6\xce\x9c\xd5\xdd\xe9\x09\xb7\xae\xcc\x3e\xd2\xa1\x68\x3b\x98\xcd\x2e\x92\x84\xda\x44\xdb\x33\x2b\x85\x6b\x8c\x01\x96\x16\x61\x55\x49\xe5\x67\xa8\xe5\x41\xfa\xb0\x7e\xd7\x8e\x79\xdd\xa7\xa4\x17\xad\xff\x9b\xaa\xfa\x37\xc2\xdb\xee\x28\x5e\x2d\x77\xf4\x9f\x03\x6c\x3d\xfc\x76\x71\xfe\x66\xeb\x85\x59\xb5\x29\x4e\x1f\xc9\x1a\xb3\xc6\x76\x9a\x37\x73\xf6\x23\x90\x69\xe0\xf1\xa2\x47\xb2\x72\x88\xc0\xc2\xaa\x08\xad\x84\x77\x5b\x73\x6b\x67\xdb\xc3\x4b\xb4\x61\x1f\x14\xc6\x6a\xe2\x69\xbc\x3e\x50\xa4\x02\xf9\x8d\x10\xb2\xde\xd1\x0f\xb0\x0c\xee\x55\xdb\x1e\x8e\x45\xa0\xe9\xbe\xc0\x60\x0a\x53\xdc\xdb\x58\x9e\x48\x45\x58\x42\x44\xa2\x8b\x51\x5a\x94\xcf\x7c\x23\x50\xa6\xa1\x31\x1a\x16\xed\x7b\xd0\x9d\xef\x0c\x94\x32\xf5\xfa\x14\x62\x5e\x32\x55\xc7\xfe\x71\xf3\x75\x0c\x36\x68\x24\xe6\x5d\x12\x47\x55\x77\xc7\x87\x9c\xdd\x32\x6e\x9b\xf4\xb8\x45\x4f\xff\x02\x8b\xbe\xfe\x76\x8b\xfe\x54\x59\xf4\x1d\x2a\xbf\x6d\x33\x0b\x72\xbb\x06\xf2\x92\x7c\xb3\xef\xb1\xf9\x7f\x3a\x05\x9b\xec\xb5\x1d\x2a\xea\xaa\xaa\x74\xe9\xda\x85\x61\x03\xbc\x40\x61\xfd\xa7\x3b\x95\xeb\x0f\x03\x35\xb9\x62\xd5\xb3\x86\x6a\x06\x2f\xa7\xb6\x22\x69\x35\x12\xa4\x54\xb7\x29\x05\x97\x54\x71\xb1\xaf\x11\x9d\xf1\x52\xaa\xbc\xbe\xf1\xd5\x79\x9b\xd1\x96\xc8\x6d\x15\x1a\x9a\x53\xcc\xf3\x9c\xaa\x3e\x2e\x16\xd2\x38\x75\xb8\x2f\x53\x02\xd1\xa8\x1a\x67\x48\x18\xec\xb6\xc8\x60\x5d\xd2\xac\x97\xad\x46\x5e\x99\x89\xae\xf1\xad\x63\x7d\xa9\x5f\xf2\x8d\xa1\x4d\xda\xb4\xe6\xe5\x2a\xb1\x74\x3f\x05\x74\x5f\x1a\x0f\xa7\x5c\x4f\x18\x89\x4d\xc1\x79\x41\xdd\x70\xe2\xcb\xc0\x3d\xfb\xfc\x1c\xf0\x99\x59\x0a\x61\x58\xb4\xe9\xe2\x0a\x68\x46\x11\x8f\xea\x26\x23\x4a\x7b\x0e\xa8\xb2\x46\xb0\x88\x89\x09\x9f\x29\x88\x92\x99\x2f\x86\x9c\xb5\x39\x16\x15\xe1\x5b\xf8\x5b\x35\x1b\x8f\x5a\x2a\x79\x41\x61\x40\x3d\xb1\xe2\xb4\x59\xf9\xe5\xad\xa7\xd3\x39\xb4\x10\x39\xd8\xe3\x81\xd2\xef\x76\x68\x06\x98\x98\x33\x49\x13\x34\xf2\x6b\xfd\xdc\xf0\xff\x98\x5e\xf6\xf0\x9e\xc5\x6b\x02\x09\x6b\xb7\x80\xee\x94\xe1\x0e\xd0\x88\x1d\x4c\x5a\x05\x97\x92\xae\x33\x04\xfb\x85\x9f\xf1\x5d\x98\xc2\xaa\x12\x56\xd1\xb4\x2d\xd6\x59\xa8\xfc\x45\x36\xea\x51\xc0\x30\xd9\xa1\x3f\xea\xf3\x7f\x06\x75\xd7\x9f\x0b\x07\x65\x6e\xcf\x53\x44\xda\x29\x89\x80\x2c\xe3\x18\xa5\xdc\x94\xd9\xf0\xc8\xe4\xb1\x0d\xb7\xc8\x47\xec\xc0\xc3\x85\xb5\xce\xfb\xbe\xe8\x0e\x6f\xd1\xab\xff\x27\xaf\x56\x68\x2e\x3d\xcd\xd3\xa3\x07\xcd\xd3\x21\x15\x8e\x8f\x99\xcd\xf2\xf5\x9b\x07\xcd\xce\x9c\xf3\x2d\x86\x73\x3b\xe5\xc6\x76\x8f\x36\x9c\xe3\xd5\x08\xae\xe3\x4b\x36\x3c\x7b\x43\xbf\x36\xd7\xca\x62\x0f\x4f\x47\xe1\x77\xa0\x7e\x3d\xfc\x96\x63\xd6\xe8\xf4\x47\x89\x62\x7f\x50\x8f\xba\x50\x0f\x7c\x51\xaa\x0e\xa8\x26\x73\xcd\xf5\x1d\xaa\xca\xb0\x9a\x98\x0b\x6f\x33\xe5\x42\xc8\xf6\xc6\x87\x95\x69\x85\x42\xbb\x73\xea\x69\xda\x3b\xe6\x9f\x99\x8e\xa3\xb5\xbf\xf7\x09\xc3\xc6\xe4\xf4\x7c\xd4\xdf\xe8\x93\x8a\x41\xd0\x19\x54\x41\xee\x2f\x3b\xa1\x5a\x78\x26\x08\x77\x6f\x6a\x45\x5b\xb5\xe5\xee\x8d\xd4\x18\x51\x35\x21\x84\x8d\x80\xb7\xbe\x72\x05\xa5\x87\xfe\x4b\x7b\xfb\x04\xd5\x4e\x88\x44\xf6\x78\x3b\xed\xae\x68\xa7\x56\xe6\x84\xc8\xc8\x00\xe7\x49\xa7\x5a\x37\xf4\x5b\x2e\x95\x36\x78\x1f\xf9\x7b\x07\xeb\x14\x69\x43\x6e\xb7\x9d\xbd\x9a\x6b\xe2\x40\xf5\x5f\xba\xe4\xf3\x1b\x9d\x11\x04\xca\x5e\xea\xf9\x8d\x06\xf6\x55\xe5\x77\xa8\x64\xfd\xe1\xd8\x6e\xcb\x68\xe7\x1f\x34\xb4\x33\x94\x95\xa3\x8e\x8f\xf6\xac\xdb\xf3\x45\xea\x29\x92\x76\xfb\x33\xd0\xf1\x5b\xeb\x65\x22\xfb\x81\xca\xfb\x0c\xf5\xe8\x4c\x14\x24\x7e\xcb\x27\xb4\x4a\x20\x97\xc9\xde\x07\xd2\x76\x17\xb9\x5f\x8b\x20\xef\x85\x07\x0f\x15\xdc\x45\xf7\xcb\x5b\x40\xd7\xb9\xb7\x43\x62\xfd\xa8\xc7\xfe\x1b\x00\x00\xff\xff\x12\x53\x51\x8c\x89\x28\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/api.proto"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}

// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Api statically implements the virtual filesystem provided to vfsgen.
var Api = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/api.proto": &vfsgen۰CompressedFileInfo{
			name:             "api.proto",
			modTime:          time.Time{},
			uncompressedSize: 9119,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\x5b\x73\xdb\x36\xd6\xef\xfa\x15\x67\xf4\xf2\x39\xdf\x38\x62\x92\x5e\xb6\x63\xaf\xb7\xab\x95\xdd\x44\xd3\x44\xf2\x58\x72\x3b\x7d\xd2\x40\xe4\x11\x89\x9a\x04\xb8\x00\x28\x45\xdb\xf1\x7f\xdf\x39\x00\x48\x81\x14\x65\xa7\x49\xfa\xb0\x7a\x68\x2d\x9c\x0b\xce\xfd\x02\x25\x8a\x60\x22\xcb\xbd\xe2\x69\x66\xe0\xcd\xab\xd7\x3f\xc0\x82\x15\xba\x12\x29\x2c\xae\x17\x30\xc9\x65\x95\xc0\x8c\x19\xbe\x45\x98\xc8\xa2\xac\x0c\x17\x29\x2c\x91\x15\xc0\x2a\x93\x49\xa5\x47\x83\x28\x1a\x44\x11\xbc\xe7\x31\x0a\x8d\x09\x54\x22\x41\x05\x26\x43\x18\x97\x2c\xce\xb0\x86\x9c\xc3\x2f\xa8\x34\x97\x02\xde\x8c\x5e\xc1\x19\x21\x0c\x3d\x68\xf8\xe2\x92\x58\xec\x65\x05\x05\xdb\x83\x90\x06\x2a\x8d\x60\x32\xae\x61\xc3\x73\x04\xfc\x18\x63\x69\x80\x0b\x88\x65\x51\xe6\x9c\x89\x18\x61\xc7\x4d\x66\xef\xf1\x5c\x48\x12\xf8\xcd\xf3\x90\x6b\xc3\xb8\x00\x06\xb1\x2c\xf7\x20\x37\x21\x22\x30\xe3\x85\xa6\x4f\x66\x4c\x79\x11\x45\xbb\xdd\x6e\xc4\xac\xc0\x23\xa9\xd2\x28\x77\xa8\x3a\x7a\x3f\x9d\xdc\xcc\x16\x37\x2f\xdf\x8c\x5e\x79\xa2\x7b\x91\xa3\xd6\xa0\xf0\xdf\x15\x57\x98\xc0\x7a\x0f\xac\x2c\x73\x1e\xb3\x75\x8e\x90\xb3\x1d\x48\x05\x2c\x55\x88\x09\x18\x49\x42\xef\x14\x27\xbb\x9d\x83\x96\x1b\xb3\x63\x0a\x89\x4d\xc2\xb5\x51\x7c\x5d\x99\x96\xcd\x6a\x11\xb9\x6e\x21\x48\x01\x4c\xc0\x70\xbc\x80\xe9\x62\x08\xff\x1a\x2f\xa6\x8b\x73\x62\xf2\xeb\x74\xf9\x6e\x7e\xbf\x84\x5f\xc7\x77\x77\xe3\xd9\x72\x7a\xb3\x80\xf9\x1d\x4c\xe6\xb3\xeb\xe9\x72\x3a\x9f\x2d\x60\xfe\x13\x8c\x67\xbf\xc1\xcf\xd3\xd9\xf5\x39\x20\x37\x19\x2a\xc0\x8f\xa5\x22\x0d\xa4\x02\x4e\xd6\xc4\xc4\x9a\x6e\x81\xd8\x12\x61\x23\x9d\x48\xba\xc4\x98\x6f\x78\x0c\x39\x13\x69\xc5\x52\x84\x54\x6e\x51\x09\x8a\x84\x12\x55\xc1\x35\x79\x55\x03\x13\x09\xb1\xc9\x79\xc1\x0d\x33\xf6\xe8\x48\xaf\xd1\xc0\xde\xe4\x43\x6c\x32\x9b\x2c\xe1\xef\xda\x7d\x1b\xc5\x14\x6c\xc2\xc6\xda\x3f\xd3\x82\xf1\x7c\x14\xcb\xe2\x1f\x83\x81\xde\x0b\xc3\x3e\xc2\x15\x0c\x4b\x25\x8d\xfc\x66\x78\x39\x18\x94\x2c\x7e\x20\x49\xe2\x82\x69\x9d\x5d\x0e\x06\xbc\x28\xa5\x32\x30\x4c\xa5\x4c\x73\x8c\x58\xc9\x23\x26\x84\xf4\x82\x8c\x2c\xe5\xf0\xb2\x41\xb3\xdf\xe3\x97\x29\x8a\x97\x7a\xc7\xd2\x14\x55\x24\x4b\x8b\xda\x4b\x36\x18\x38\x28\x9c\xa5\xaa\x8c\x47\x29\x33\xb8\x63\x7b\x07\x8e\x57\x29\x8a\x95\xe7\x32\xf2\x5c\x46\xb2\x44\xc1\x4a\xbe\x7d\x53\x43\x5e\xc0\x15\xfc\x31\x00\xe0\x62\x23\x2f\xec\x5f\x00\x86\x9b\x1c\x2f\x60\x38\xc9\x2b\x6d\x50\xc1\x07\x26\x58\x8a\x0a\xc6\xb7\x53\x58\x2c\xde\x41\xa9\xe4\x96\x27\xa8\x86\x97\x16\x7d\xeb\xf2\xe7\x02\x86\xdb\x57\xa3\xd7\xa3\x57\xfe\x38\x96\xc2\xb0\xd8\xd4\x4c\xe9\x23\x58\x41\x7c\x43\x3b\x7b\x64\xfa\x54\x2a\xbf\x80\x21\xc5\xbd\xbe\x88\xa2\x94\x9b\xac\x5a\x93\xad\x23\xef\x89\x97\xb1\x88\x4d\x14\x17\xec\xa5\xd6\x59\x40\x87\xe4\x94\x0b\x18\x3e\xe9\x30\x8f\xff\x48\xff\xb3\xff\xc1\x8f\x06\x95\x60\xf9\x2a\x91\xb1\xae\x85\xfc\x1c\x11\x12\xd4\xb1\xe2\xd6\xbe\x17\x30\xfc\x20\x15\x02\x5b\xcb\xca\xc0\x27\x99\xef\x71\x00\xa0\xe3\x0c\x0b\xd4\x17\xf0\x6e\xb9\xbc\x5d\x5c\x76\x4f\xe8\x20\x96\x42\x57\xf6\x64\xe8\x93\x9a\xee\x8b\x7e\xd7\x52\x58\x36\xa5\x92\x49\x15\x9f\x82\x3f\x5e\x0e\x06\x1a\xd5\x96\xc7\xd8\x48\xe5\x14\xa6\x5c\xe5\x79\xee\x64\xb2\x55\x90\x41\xec\x30\x2c\x5c\x95\x31\x4c\x14\x32\x83\x35\xdd\x59\xeb\xeb\x07\x9d\xbe\x00\x85\xa6\x52\x42\x77\x40\x77\x58\xe6\xfb\x17\x81\xf7\x9b\x58\xb5\xb9\x30\x62\x25\x1f\x91\xa5\xeb\x08\x3c\x7c\x4a\xa9\x0d\x5c\xc0\xd0\xa6\xcb\xf6\x75\xe4\x05\x1a\xb6\x90\xd6\x32\xd9\x13\xd2\xff\x1f\x8e\x1f\xbd\x8f\x5b\x9a\x29\x34\x8a\xe3\xd6\xd5\x10\x6d\x98\xa9\x34\xd5\xdd\x46\x4d\xaa\x0f\xc0\x8d\x86\x87\x6a\x8d\xb1\x14\x1b\x9e\xda\x12\x13\x4b\x21\x30\x36\x7c\xcb\xcd\xbe\x31\xc5\x5b\x34\x8d\x1d\x0e\x7f\xb7\x8d\x70\x38\xff\x7c\x0b\xa4\xf8\xb4\x01\x7a\x35\x4d\x30\x47\x83\x3d\x0e\xbc\xb6\x80\x46\xf0\xd6\xd7\xb6\xec\x2d\xd0\xe7\x8b\xef\x25\xf9\xd3\x1a\x34\xbe\x62\x90\x73\x6d\xc8\x4f\x9e\x50\xf7\xb8\xe0\x3d\xa1\x9c\xb5\xbf\x9f\x72\x05\xc1\xbe\xb6\x3b\x22\x92\xf1\x79\x8d\x2a\x25\xea\x12\x69\xab\xac\x2a\x6c\x6e\xfa\x22\xc1\x4a\x0e\x94\x9a\x81\xbb\xde\xa2\xf1\x23\xc9\x34\x40\x3f\x3b\x1c\x1f\x29\xe9\xcf\xbf\x9a\x82\x5e\xdc\x67\x74\x63\xc9\xef\x95\x36\xc0\x9e\x2c\x1e\x63\x8b\xe4\xbd\x30\x93\x09\x6a\x38\x6b\x9d\xb5\x95\x69\x81\xbe\xa0\x82\x54\x5f\xb5\x80\x90\x0b\xab\x32\x55\x2c\x41\x2f\x83\xb6\x35\x82\x41\xca\xb7\x28\x8e\x94\x7e\x8b\xe6\xde\xa1\x7b\x4d\xba\x8e\x3c\x09\x3d\x72\xed\x49\xcc\xaf\x1e\xcd\x5e\xc1\xe7\x9c\x6e\x0c\x16\xa5\xa1\x09\xb2\xb6\xc8\xb1\xd3\xdb\x42\xc3\x59\xfb\x7b\x5b\xc7\x36\xec\x6b\xbb\xfc\x58\xab\xe7\x5c\xff\x38\x18\xa0\xa8\x8a\xba\x4f\x2e\x5c\xc7\x68\xba\xe5\x4c\x1a\xd0\x68\xec\xd7\xc5\x72\xbc\xbc\x5f\xac\xee\x67\x8b\xdb\x9b\xc9\xf4\xa7\xe9\xcd\x35\x5c\xc1\xab\xcb\x1a\x75\x99\x21\xdc\xde\xcd\x7f\x99\x2e\xa6\xf3\xd9\x74\xf6\xd6\x76\x1f\x04\x2e\x12\x6a\xcf\xa8\x6d\x47\xaa\xbb\x10\xd7\xb0\x46\x1a\x5d\x63\xdb\x43\x93\x91\xe5\xd2\x22\xbf\x82\xd7\x2d\xde\x77\xf7\xb3\x67\xd9\x66\x8c\xf8\x52\x88\x3a\xb6\xae\xdb\x69\xd8\x54\x79\xbe\x87\x4a\xd3\x6e\xe0\xae\xaa\xb9\x5d\xc1\x9b\xf6\x2d\x37\x93\xf9\x6c\x32\x7d\xdf\x7f\x13\x33\xa0\x65\x81\xb0\x93\xea\x81\xf8\x32\xea\x98\x98\xef\xbd\x32\x89\x14\x48\x4b\x42\x20\xd2\x39\xe8\x2a\xce\x80\x69\x1f\x3f\x84\x46\xe0\x82\x59\x81\xa5\x02\x21\x13\x6c\x56\x12\x2f\x5c\x20\xc4\x15\x7c\xd3\x12\x70\xb1\x9c\xdf\xde\x7e\xb2\x79\x5d\x6b\x4a\xbc\xff\x3c\xe5\x15\x7c\xdb\x62\x79\x73\x77\x37\xbf\x7b\x92\x1f\xed\x72\x6b\x84\x4a\x38\x13\x5a\x62\x47\x75\x05\xdf\xb5\x78\x5d\xdf\xbc\xbd\x1b\x5f\xdf\x5c\x3f\xc9\xce\x2f\x6d\x9a\xf6\x4b\x65\x8d\x48\x46\x93\xa0\x50\x1b\x1a\x28\xc9\x5d\xb0\xa9\x84\x05\xb0\xbc\x1e\x49\x1a\xde\x57\xf0\xfd\x65\x13\xb9\x3f\x57\x6b\x54\x02\x0d\xea\x25\xe3\xc2\xdc\x6c\x36\x18\x9b\x43\x04\x5f\x4b\xbb\xc9\xb2\x3c\x97\x3b\x10\xb8\x83\x52\x26\x9a\x2e\xa3\xa1\x33\xa9\x72\x72\x98\x91\x56\x3c\xeb\x89\xca\xed\x95\x26\xc3\x3d\x18\x99\xa3\x22\x35\x08\x4a\x9b\xac\x71\xfe\x99\xc9\x45\x4d\x1c\x66\xc0\xf8\x50\x2c\xe8\xca\xe6\x82\xe6\xd6\xde\x9b\x84\x04\x69\x17\x42\x7b\x48\xeb\x34\x35\x4a\x7b\x9b\x0d\xb1\x2d\xe3\xf9\x21\x6e\x6f\x15\x6e\xa8\xb3\x04\x02\x1c\xd2\xe4\x66\xcb\x63\x03\x4c\xec\x81\xe5\x0a\x59\xb2\x7f\xa9\x2a\xe1\x36\x44\xab\x34\xc5\x6f\xe2\x84\x3b\xad\xda\xcd\x47\x8c\x2b\x83\x2e\x33\x1e\x07\x83\x02\xb5\xa6\x25\xaf\x3b\x08\x07\x45\x82\x15\x58\x2f\xf7\xb5\x8b\x8d\xa4\x80\x69\x5a\xa5\x0f\x41\x5a\xa5\x45\x6a\x17\xa3\xa3\xfc\xae\x87\x06\xb9\x09\x5c\x6a\xfb\x0e\x65\x9b\xb7\x8f\x1e\xc1\x44\x0a\xa3\x64\x0e\x65\xce\x44\x43\xa5\x81\x29\x84\x04\x0d\x6d\xc2\xc2\x3d\x07\x90\x38\x1f\x58\x9c\x71\x81\x8b\x12\xe3\x51\x28\xc1\xc3\x0f\x7a\x55\x5f\x18\x96\x80\x5f\x33\xb4\xbe\xb0\x79\x69\xba\x39\xf5\x6e\x3c\x70\xf5\x54\xe6\x90\xf1\x34\x5b\x79\xe7\x70\x0a\xd1\xa3\x4c\xdd\xb0\xb5\xe2\xb1\xb7\x44\xa5\x3b\x26\x40\x43\x6a\xad\x3c\x52\x98\x92\x5e\x66\x0d\xbb\x8c\xc7\x99\x7d\x6b\x51\x5c\x63\x28\x8c\x6b\x3d\x58\xba\x22\xb7\xd0\x59\xa0\xa7\xdd\x44\x95\xcc\x57\xd6\x40\x2b\x6b\xb5\x56\x9a\x7e\x29\x7f\xe7\x8e\x86\xf1\xf7\x81\xd2\x5c\x83\xce\x64\x95\x27\xa4\x32\x83\x2d\xcb\x2b\x84\x9c\x3f\x20\xf0\xf2\xc2\xee\xfc\x36\x06\x77\xd4\x5a\x1d\x06\x57\xa6\x62\x39\x4c\x6f\x23\x02\xd7\x9c\x6e\x99\xd6\xe4\x44\x16\x3f\x90\xfd\xea\xe5\x15\xe2\x4a\x1b\x59\xa0\xd2\xde\xaa\xf6\xad\xc7\x48\xd2\xa1\xa8\x84\xad\x34\xe0\x53\x2c\xd4\xc4\xdb\x9c\x95\x7c\x85\x22\x29\x25\xa5\xd6\x15\xfc\xad\x11\xfc\x56\xf1\x2d\x91\x3e\xe0\xde\x3a\xca\x96\x07\x9d\x01\xa7\x7c\x2d\xbc\xb9\x42\x4e\xa5\x23\x58\x11\xc1\x15\xfc\x70\x3a\x4f\x6c\x83\x0f\x96\xcf\xd3\xe1\xb5\x63\x3a\x4c\x17\x17\xc0\xdc\x3d\x70\xa1\x36\x87\xc0\x93\x0f\x47\xa9\x93\xa0\x61\x3c\xd7\xdd\x1c\xf4\xa4\x54\x56\x4b\x29\xb4\x2b\xdb\xf5\x68\x65\xb0\x68\x10\xbb\xa9\xde\xda\xf5\x3e\x25\xcf\x73\x29\x1f\x30\x81\xaa\xec\xcf\xf2\x5e\xd6\x1d\xd3\x4c\x3b\x1d\xcc\x75\x51\xbd\xd7\x06\x8b\x63\xe5\x43\x55\xae\xad\xf6\x4f\x2a\xd4\xdd\x01\x43\x8f\x30\x5b\x66\x83\xbb\xff\x4f\x3b\xd1\x8d\x84\x04\xb5\x51\x72\xff\xac\x56\xc7\x8b\xe4\xe1\x86\x89\xcd\x87\x50\xb7\x35\xd6\x8c\x7d\x4d\xe8\xf3\xeb\xa2\xd9\xdd\x89\x34\x8c\x02\x2f\x88\x5f\xee\x4f\xfb\xce\x2f\x88\xf0\xc7\x69\xf0\x17\xf9\xc0\x13\xbd\xef\x5d\x5d\xeb\xda\xd1\x13\x6e\xc7\x32\x87\x48\x07\x61\xae\x3b\xb1\x16\x2a\xcf\x93\x96\x0c\x3d\x91\xd9\xe3\xb3\x43\x99\x1f\x27\x09\x77\xb3\x45\xcf\x8e\xda\x7e\x39\x39\xc1\xd2\x21\xac\x6a\x0d\xba\xb5\xff\x34\x7d\x7b\xd0\x6e\x9c\xf8\x6d\x9f\x41\x82\xc8\xfe\xdf\x37\x4b\x98\x69\xc1\xe3\x93\xad\xde\xf6\xed\xe9\x89\xca\x1d\xe0\x77\x87\xd7\x3f\x6d\xe9\x60\x5e\x9d\x5f\xcf\x2f\xe0\xec\x3f\x2c\xce\xca\x2a\x7e\x78\x41\xb3\xe2\x8e\xc6\x35\xd7\x01\x58\x92\x34\xc5\xdf\xbe\x64\x66\x52\x9b\x1f\x43\x37\x1d\xe6\x94\xf7\x6c\x8d\xf9\xc1\x49\x24\x98\xf0\xc6\x67\x90\x13\xf0\xf9\xf9\xc7\x36\xcb\x7e\x02\x07\xeb\xa6\x4d\x67\xf2\x3d\x75\xbd\x9d\xee\xfe\xcc\xf5\x47\x04\xc1\xf5\x01\x05\xba\x49\xbb\x43\xd2\x3f\x8e\x7b\x5c\x1b\x0f\x8f\xf6\xd7\x87\x65\xf0\x9b\x86\x0b\x33\xf7\xc4\xd0\xfc\xce\x41\xf3\x45\xa3\x6a\x67\x04\x69\x69\x4a\x4b\x84\x55\x89\x18\x90\x9f\x58\x1c\xa3\x6e\xf5\xeb\x06\xa5\xab\xb5\xb5\xb4\x6e\x7e\x64\x69\xf5\xfa\xa6\x86\x75\xdd\xec\x89\xba\xab\x4f\xfd\x86\xf7\x70\x98\x5e\xad\x59\x4e\x72\x73\x5e\x73\x38\xad\x79\x64\xb9\x2f\xad\x2b\xbc\x38\x14\x8c\x87\x47\xa7\x33\x5d\xb0\x3c\x3f\x87\x02\x13\x5e\x15\xe7\x90\x96\xd5\x39\x8c\x46\xa3\x17\xad\x42\x20\xb4\x61\x22\x46\xcb\xa9\x9e\x50\xa2\x88\xca\x7f\x38\x68\xdb\x37\x7a\xf7\x1c\x17\x34\x88\xc3\xbb\x9b\xeb\x1d\x51\x04\xae\x51\x90\x99\x6a\xea\xba\x23\x1d\xd3\x75\x9b\xca\x06\x64\x49\xbb\x06\x51\xd1\x94\x33\xff\xf9\x44\x3f\xaf\x59\xf5\x3c\x07\x1e\x1e\x3f\xbc\xb1\x0d\x4b\xeb\x4d\x3b\xe5\x34\xe2\x94\x52\x73\x23\xd5\xbe\x41\xf4\x96\x48\xb9\x09\x26\xfd\xd7\x97\x5d\x46\x19\xd3\x59\x5d\x3d\x88\x13\x8d\x92\xdc\xf4\x71\x71\x90\x43\x1a\x9c\x9e\xe9\x8c\x42\xb4\xaa\xc6\x39\x32\x01\xbb\x0c\x05\xac\x2b\x9e\xf7\xb2\x25\xe4\x95\xdb\x96\x9b\x72\x59\xef\xae\x74\x28\x37\x96\x36\xe9\xd2\xda\xc3\x55\xe2\xe8\xbe\x6d\xd1\xfd\x72\xf0\x70\x2a\x9b\x89\x96\x06\x7d\xee\x97\xf7\x50\x06\x19\xd8\xe7\xbb\x16\x9f\x89\xa3\x50\x87\xed\x25\xa0\x8b\x6b\x60\xb3\x02\xd4\xd3\x74\xce\x0c\x79\x0e\xb8\x71\x46\x70\x88\x89\x0d\x9f\x08\xea\x95\x54\x8a\x2e\xc7\xb2\x26\x6c\x72\xe1\x71\x30\xe8\xa8\x14\x04\x85\x05\xf5\xc4\x8a\xd7\x66\x15\xb6\xb0\x9e\x29\xe9\xa9\x47\xc9\x27\xe7\x43\xbf\xc3\xa0\x5d\x39\x63\x29\x34\x4f\xd0\xca\x4f\xfa\xf9\x07\xb8\x4f\x99\x83\x9f\x7e\xeb\x0c\x06\x48\x26\xba\xe3\xa3\xbf\xe5\xf4\xf4\x68\xc5\x6e\xed\xc6\xa5\xd4\x9a\xd3\xba\xe4\xfe\x91\x81\x90\xbb\x76\x59\xaa\x4b\x7d\x4d\xd3\xb5\xd8\xd1\xa3\xe6\x5f\x64\xa3\x1e\x05\x2c\x93\x1d\x86\x2f\x68\xf2\xc7\x56\x7f\x0a\x37\xf9\x93\x32\x77\x77\x31\xa6\xdd\x86\xc5\x40\x57\xb6\x63\x6c\xaa\xfc\xf4\xba\x15\xb0\xed\x3e\xe8\xff\xb5\x96\xe8\xac\xeb\x3b\xaa\x2c\xc2\xd4\x03\x4a\xcf\xcc\x74\x6a\x6f\x67\x49\xd2\x2c\xed\x6f\x3e\x81\xbd\xc2\x42\x6e\x11\x36\x4a\x16\x4f\xde\x71\x67\xf1\xc2\x9b\x1c\x65\x73\xd9\x37\x9d\xfa\xde\x4b\x73\x54\xe1\x69\xda\xea\x6b\xe9\x81\xad\x2c\x4a\x63\xab\xc7\x93\x3e\xfa\x52\xcf\xff\x37\x00\x00\xff\xff\xe2\x68\x7e\x07\x9f\x23\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/api.proto"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}

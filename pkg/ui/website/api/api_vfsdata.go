// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Api statically implements the virtual filesystem provided to vfsgen.
var Api = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/api.proto": &vfsgen۰CompressedFileInfo{
			name:             "api.proto",
			modTime:          time.Time{},
			uncompressedSize: 8311,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x73\xe3\xb6\x11\x7f\xd7\x5f\xb1\xa3\x97\xfa\x3a\x77\xa2\xcf\x97\xb4\x19\xbb\x6e\xeb\xca\x8e\xa3\x89\x4f\xf6\x48\xf2\x65\xf2\xa4\x81\xc0\x15\x85\x98\x04\x50\x00\x94\x4e\x93\xf1\xff\xde\xc1\x07\x29\x90\x12\xe5\xfb\x9c\xa9\x1e\x12\x13\xd8\x5d\xec\xfe\x76\xb1\x1f\xb8\x24\x81\xa1\x90\x5b\xc5\xb2\x95\x81\xb3\xd3\xb7\x3f\xc1\x94\x14\xba\xe4\x19\x4c\xaf\xa7\x30\xcc\x45\x99\xc2\x98\x18\xb6\x46\x18\x8a\x42\x96\x86\xf1\x0c\x66\x48\x0a\x20\xa5\x59\x09\xa5\x07\xbd\x24\xe9\x25\x09\xdc\x31\x8a\x5c\x63\x0a\x25\x4f\x51\x81\x59\x21\x5c\x49\x42\x57\x58\xed\xbc\x86\x0f\xa8\x34\x13\x1c\xce\x06\xa7\x70\x62\x09\xfa\x61\xab\xff\xea\xc2\x8a\xd8\x8a\x12\x0a\xb2\x05\x2e\x0c\x94\x1a\xc1\xac\x98\x86\x25\xcb\x11\xf0\x23\x45\x69\x80\x71\xa0\xa2\x90\x39\x23\x9c\x22\x6c\x98\x59\xb9\x73\x82\x14\xab\x09\xfc\x1e\x64\x88\x85\x21\x8c\x03\x01\x2a\xe4\x16\xc4\x32\x26\x04\x62\x82\xd2\xf6\xb7\x32\x46\x9e\x27\xc9\x66\xb3\x19\x10\xa7\xf0\x40\xa8\x2c\xc9\x3d\xa9\x4e\xee\x46\xc3\x9b\xf1\xf4\xe6\xcd\xd9\xe0\x34\x30\x3d\xf2\x1c\xb5\x06\x85\xff\x2d\x99\xc2\x14\x16\x5b\x20\x52\xe6\x8c\x92\x45\x8e\x90\x93\x0d\x08\x05\x24\x53\x88\x29\x18\x61\x95\xde\x28\x66\x71\x7b\x0d\x5a\x2c\xcd\x86\x28\xb4\x62\x52\xa6\x8d\x62\x8b\xd2\x34\x30\xab\x54\x64\xba\x41\x20\x38\x10\x0e\xfd\xab\x29\x8c\xa6\x7d\xf8\xcf\xd5\x74\x34\x7d\x6d\x85\xfc\x36\x9a\xfd\x72\xff\x38\x83\xdf\xae\x26\x93\xab\xf1\x6c\x74\x33\x85\xfb\x09\x0c\xef\xc7\xd7\xa3\xd9\xe8\x7e\x3c\x85\xfb\x9f\xe1\x6a\xfc\x3b\xfc\x3a\x1a\x5f\xbf\x06\x64\x66\x85\x0a\xf0\xa3\x54\xd6\x02\xa1\x80\x59\x34\x31\x75\xd0\x4d\x11\x1b\x2a\x2c\x85\x57\x49\x4b\xa4\x6c\xc9\x28\xe4\x84\x67\x25\xc9\x10\x32\xb1\x46\xc5\x6d\x24\x48\x54\x05\xd3\xd6\xab\x1a\x08\x4f\xad\x98\x9c\x15\xcc\x10\xe3\x96\xf6\xec\x1a\xf4\xdc\x49\x21\xc4\x86\xe3\xe1\x0c\xfe\xa1\xfd\xd7\x80\xda\x60\xe3\x2e\xd6\xfe\x9d\x15\x84\xe5\x03\x2a\x8a\x7f\xf6\x7a\x7a\xcb\x0d\xf9\x08\x97\xd0\x97\x4a\x18\xf1\xae\x7f\xd1\xeb\x49\x42\x9f\xac\x26\xb4\x20\x5a\xaf\x2e\x7a\x3d\x56\x48\xa1\x0c\xf4\x33\x21\xb2\x1c\x13\x22\x59\x42\x38\x17\x41\x91\x81\xe3\xec\x5f\xd4\x64\xee\x9b\xbe\xc9\x90\xbf\xd1\x1b\x92\x65\xa8\x12\x21\x1d\xe9\x41\xb6\x5e\xcf\xef\xc2\x49\xa6\x24\x1d\x64\xc4\xe0\x86\x6c\xfd\x36\x9d\x67\xc8\xe7\x41\xca\x20\x48\x19\x08\x89\x9c\x48\xb6\x3e\xab\x76\x5e\xc1\x25\xfc\xd9\x03\x60\x7c\x29\xce\xdd\x5f\x00\x86\x99\x1c\xcf\xa1\x3f\xcc\x4b\x6d\x50\xc1\x7b\xc2\x49\x86\x0a\xae\x1e\x46\x30\x9d\xfe\x02\x52\x89\x35\x4b\x51\xf5\x2f\x1c\xf9\xda\xdf\x9f\x73\xe8\xaf\x4f\x07\x6f\x07\xa7\x61\x99\x0a\x6e\x08\x35\x95\x50\xfb\xe3\xa4\xb0\x72\x63\x9c\x03\xb1\xfd\x95\x2a\x3f\x87\xbe\x8d\x7b\x7d\x9e\x24\x19\x33\xab\x72\x61\xb1\x4e\x82\x27\xde\x50\x4e\x4d\x42\x0b\xf2\x46\xeb\x55\xc4\x87\xd6\x29\xe7\xd0\x3f\xea\xb0\x40\xff\x6c\xff\xe7\xfe\x83\x1f\x0d\x2a\x4e\xf2\x79\x2a\xa8\xae\x94\xfc\x12\x15\x52\xd4\x54\x31\x87\xef\x39\xf4\xdf\x0b\x85\x40\x16\xa2\x34\xf0\x49\xf0\x3d\xf7\x00\x34\x5d\x61\x81\xfa\x1c\x7e\x99\xcd\x1e\xa6\x17\xed\x15\xbb\x40\x05\xd7\xa5\x5b\xe9\x87\x4b\x6d\xcf\x4b\xfe\xd0\x82\x3b\x31\x52\x89\xb4\xa4\x5d\xfb\xcf\x17\xbd\x9e\x46\xb5\x66\x14\x6b\xad\xbc\xc1\xf6\xae\xb2\x3c\xf7\x3a\xb9\x2c\x48\x80\x7a\x0a\xb7\xaf\x24\x85\xa1\x42\x62\xb0\xe2\x3b\x69\x7c\xbe\xd7\xd9\x2b\x50\x68\x4a\xc5\x75\x6b\x6b\x82\x32\xdf\xbe\x8a\xbc\x5f\xc7\xaa\xbb\x0b\x03\x22\xd9\xc0\x22\x5d\x45\xe0\xee\x27\x85\x36\x70\x0e\x7d\x77\x5d\xd6\x6f\x93\xa0\x50\xbf\x41\xb4\x10\xe9\xd6\x12\xfd\x75\xb7\xfc\x1c\x7c\xdc\xb0\x4c\xa1\x51\x0c\xd7\x3e\x87\x68\x43\x4c\xa9\x6d\xde\xad\xcd\xb4\xf9\x01\x98\xd1\xf0\x54\x2e\x90\x0a\xbe\x64\x99\x4b\x31\x54\x70\x8e\xd4\xb0\x35\x33\xdb\x1a\x8a\x5b\x34\x35\x0e\xbb\xbf\x9b\x20\xec\xd6\xbf\x1c\x81\x0c\x8f\x03\x70\xd0\xd2\x14\x73\x34\x78\xc0\x81\xd7\x6e\xa3\x56\xbc\xf1\xd9\xd4\xbd\xb1\xf5\xe5\xea\x07\x4d\x3e\xdb\x82\xda\x57\x04\x72\xa6\x8d\xf5\x53\x60\xd4\x07\x5c\x70\x67\x49\x4e\x9a\xdf\x5d\xae\xb0\x7b\xdf\xda\x1d\x89\xd5\xf1\x65\x8b\x4a\xc5\xab\x14\xe9\xb2\xac\x2a\xdc\xdd\x0c\x49\x82\x48\x06\xf6\x6a\x46\xee\xba\x45\x13\x5a\x92\x51\x44\x7e\xb2\x5b\xde\x33\x32\xac\x7f\x33\x03\x83\xba\x2f\xd8\x46\xd2\x3f\x4a\x6d\x80\x1c\x4d\x1e\x57\x8e\x28\x78\x61\x2c\x52\xd4\x70\xd2\x58\x6b\x1a\xd3\xd8\xfa\x8a\x0c\x52\x7e\xd3\x04\x62\x5d\x58\xca\x4c\x91\x14\x83\x0e\xda\xe5\x08\x02\x19\x5b\x23\xdf\x33\xfa\x16\xcd\xa3\x27\x0f\x96\xb4\x1d\xd9\xb9\xbb\xe7\xda\x4e\xca\x6f\x1e\xcd\xc1\xc0\x97\x9c\x6e\x0c\x16\xd2\xd8\x0e\xb2\x42\x64\xdf\xe9\x4d\xa5\xe1\xa4\xf9\xdd\xb4\xb1\xb9\xf7\xad\x5d\xbe\x6f\xd5\x4b\xae\x7f\xee\xf5\x90\x97\x45\x55\x27\xa7\xbe\x62\xd4\xd5\x72\x2c\x0c\x68\x34\xee\x73\x3a\xbb\x9a\x3d\x4e\xe7\x8f\xe3\xe9\xc3\xcd\x70\xf4\xf3\xe8\xe6\x1a\x2e\xe1\xf4\xa2\x22\x9d\xad\x10\x1e\x26\xf7\x1f\x46\xd3\xd1\xfd\x78\x34\xbe\x75\xd5\x07\x81\xf1\xd4\x96\x67\xd4\xae\x22\x55\x55\x88\x69\x58\xa0\x6d\x5d\xa9\xab\xa1\xe9\xc0\x49\x69\xb0\x5f\xc2\xdb\x86\xec\xc9\xe3\xf8\x45\xb1\x2b\x62\xe5\xda\x10\xf5\x62\x7d\xb5\xd3\xb0\x2c\xf3\x7c\x0b\xa5\xb6\xb3\x81\x3f\xaa\x92\x76\x09\x67\xcd\x53\x6e\x86\xf7\xe3\xe1\xe8\xee\xf0\x49\xc4\x80\x16\x05\xc2\x46\xa8\x27\x2b\x97\xd8\x8a\x89\xf9\x36\x18\x93\x0a\x8e\x76\x48\x88\x54\x7a\x0d\xba\xa4\x2b\x20\x3a\xc4\x8f\x25\xb3\xdb\x05\x71\x0a\x0b\x05\x5c\xa4\x58\x8f\x24\x41\xb9\x48\x89\x4b\x78\xd7\x50\x70\x3a\xbb\x7f\x78\xf8\x64\x78\x7d\x69\x4a\x83\xff\x02\xe7\x25\xfc\xd0\x10\x79\x33\x99\xdc\x4f\x8e\xca\xb3\xb3\xdc\x02\xa1\xe4\x1e\x42\xc7\xec\xb9\x2e\xe1\xc7\x86\xac\xeb\x9b\xdb\xc9\xd5\xf5\xcd\xf5\x51\x71\x61\x68\xd3\x76\xbe\x54\x0e\x44\x0b\x9a\x00\x85\xda\xd8\x86\xd2\xba\x0b\x96\x25\x77\x1b\x24\xaf\x5a\x92\x5a\xf6\x25\xfc\xed\xc2\x46\x6e\x81\x5a\xdb\xf9\xa3\xdd\xa3\x45\xf1\x4b\x0a\xac\xe6\xce\xea\x74\x23\xac\x2d\x75\x16\x0f\xe8\xd8\x29\x8f\x67\xae\x67\xdf\x0b\xbd\xaa\x9e\x89\x25\xfc\x5a\x2e\x50\x71\xb4\x16\xd9\x94\x68\x03\x01\xbd\x0f\xf5\x00\x86\x82\x1b\x25\x72\x90\x39\xe1\x35\x97\x06\xa2\x10\x52\x34\x76\x48\xe3\x7e\x52\xb5\xea\xbc\x27\x74\xc5\x38\x4e\x25\xd2\x41\xac\xc1\xd3\x4f\x7a\x5e\x1d\x18\x47\x67\xa0\xd7\xb0\x59\x31\xba\x72\x23\xb8\x62\x1a\x1b\xa6\xd1\x58\x01\xc7\x18\x54\x7a\xb0\x0b\xd1\x89\x15\xe5\xdc\x51\xce\x9d\xfe\x8d\x50\xfb\x84\xd3\x7c\xfe\x43\xe9\x6f\x5a\x2c\xdc\xa3\xe2\xa4\xce\xa5\x10\xb9\xf6\x21\xd7\xe5\x31\x97\x05\xa3\x0e\x7d\x85\x6e\x40\x76\x77\xc3\x34\xec\xdb\x10\x1d\x3b\xce\x43\xc9\xfc\x2b\x00\x6a\x9f\xa6\x16\x42\xe4\x20\x9e\xf6\x9c\x98\xa2\x21\x2c\xd7\xed\x68\x08\xac\x36\xf6\xa4\xe0\x3a\xa0\x16\xea\x8f\xc1\xa2\x26\x74\xbe\x88\x4c\x68\x34\xc4\x9f\x12\x71\xb9\x10\x4f\x98\x42\x29\x0f\xc7\xdb\x41\xd1\x2d\x68\x46\xad\x6b\xee\x53\x8d\xde\x6a\x83\xc5\xbe\xf1\xb1\x29\xd7\xce\xfa\xa3\x06\xb5\x1b\xe5\xd8\x23\xc4\xd8\x9c\x12\x9d\xfd\x17\xed\x55\x37\xc2\x4e\x84\x46\x89\xed\x8b\x56\xed\x77\xdb\xbb\x13\x86\xa2\xcc\xd3\x86\x6d\x0b\xac\x04\x87\x0b\x7a\xc8\xaf\xd3\x7a\xc0\xb1\xac\x71\x14\x04\x45\xc2\x04\xd4\xed\xbb\xd0\x45\xc3\x9f\xdd\xdb\x5f\xe5\x83\xc0\x74\x77\xb0\xbf\xaf\xee\xce\x81\x70\xdb\xd7\x39\x26\x3a\x16\x6d\x47\xb3\xd9\x55\x9a\x32\x9f\x54\x0f\x34\xe7\xcd\x91\xb1\x43\xa4\x27\x98\x57\x5a\xb5\xeb\x67\x37\x7f\xb3\xc3\xa8\x1d\xf3\xee\x90\x91\x51\xb4\xfe\x7f\x9a\x1a\xdf\x88\x68\x92\x36\xa2\x1a\xa4\xed\x9f\x1d\x62\x23\xfa\x76\x71\xff\x6c\xf4\x9a\x59\x75\x57\x9c\xee\xc8\x02\xf3\x1d\x76\x56\x36\x0f\xf8\x11\xc8\xed\xe6\xcb\x45\x8f\xe4\x65\x17\x83\xdf\xab\x22\xb4\x52\x3e\xbc\x50\x7a\x9c\xfd\xc0\xa0\xd1\x87\x7d\xa3\x30\x16\xa1\xb6\xec\xbc\xde\x51\xa4\x1a\xfa\x3b\x25\x74\xfd\x1e\xda\x21\xb2\x71\xaf\xda\x78\x04\x11\x0d\x4b\xb7\xd2\x19\x59\x09\xb0\x7e\xdb\x0d\x78\x27\xda\x10\x9e\x12\x95\xda\x62\x94\xc9\xf2\x55\x0c\x02\xe3\x76\x97\xa2\x13\xd1\xbe\x07\xbc\x2c\x16\xb6\x86\x2d\x9b\xaa\x31\x6e\xde\x9d\x01\x15\x25\x37\x75\xec\xbf\x0c\xdf\x1e\x60\x9d\x20\xf1\xe8\x92\x04\xae\xba\x7f\x3f\xe6\xec\x16\xb8\x6d\xd6\x97\x11\x3d\xfb\x0e\x88\xbe\xfb\x7c\x44\x7f\xa8\x10\xbd\x45\x13\xb7\x6d\xee\x31\xd2\xbf\x3b\x44\x49\x7e\xf7\xc0\xe0\xf3\x7f\x92\x80\x4f\xf6\x16\x87\x8a\xbb\xaa\x2a\xfb\x7c\xed\xc2\xb0\x04\x21\x51\x79\xff\xd9\x4e\xe5\xfe\xd7\x8e\x9a\x5c\x89\x3a\xf0\xee\xb1\x9b\xf2\x82\xd9\x86\x64\xd5\x48\x91\x31\xdb\xa6\x48\xa1\x99\x11\x6a\x5b\x13\x06\xf0\x32\x66\xa2\xbe\xf1\xed\x45\x5b\xd0\x8a\xe8\x55\x15\x1a\x56\x12\x15\x45\xc1\xcc\x21\x29\x7e\x67\xe7\xd4\xee\xbe\xcc\x28\x44\x67\x2a\xcd\x91\x70\xd8\xac\x90\xc3\xa2\x64\xf9\x41\xb1\x96\x78\xee\xc7\x82\xda\xb7\x41\xf4\xb5\x5d\x14\x4b\xc7\x9b\xb6\x79\xdd\xe2\x3c\xf5\x7c\x3f\x34\xf8\x3e\xec\x3c\x9c\x09\x3b\x4d\xa4\x3e\x05\x17\x92\x85\x29\x25\xd6\x41\x44\xf8\xfc\xd8\x90\x33\xf4\x1c\xca\x89\x68\xf3\xd1\x6a\xd3\x8d\x1d\x11\xd7\x43\x4e\x8c\xf5\x1c\x30\xe3\x41\xf0\x84\xa9\x0b\x9f\x04\x54\xc9\xdd\xbf\xce\x08\xde\x96\x28\x2b\xc6\x4b\xf8\x7b\x35\x88\xf7\x5a\x26\x45\x41\xe1\xb6\x0e\xc4\x4a\xb0\x66\x1e\x97\xb7\x03\x9d\xce\xb1\xd7\x97\xa3\x3d\x9e\x1f\x78\x37\xe8\x06\x18\x2a\xb8\x66\x29\x3a\xfd\xad\x7d\xe1\xa5\xe1\x53\x7a\xd9\xe3\x8f\x3a\x51\x13\x48\x78\xbb\x05\x0c\xa7\x74\x77\x80\x4e\xed\xc6\xa4\x25\x85\xd6\x6c\x91\x23\xf8\x7f\x4d\xe5\x62\xd3\x4c\x61\x55\x09\xab\x78\xda\x88\xed\xbd\xde\x7c\x27\x8c\x0e\x18\xe0\x84\x6c\x30\x7e\x2a\x10\xff\x6a\xd4\xdd\x78\x2e\xec\xd4\xb9\x3d\x4f\x11\xed\xa7\x24\x02\xba\xa4\x14\xb5\x5e\x96\x79\xf7\xc8\x14\x89\x6d\xbf\x5c\x7e\x5f\x24\x5a\x23\xe7\xc6\x66\x16\xee\x1a\x29\x92\xa6\x87\xfa\xa9\x83\xb3\x27\x49\xd3\x7a\x9c\xed\x1c\x9e\x23\xd9\x0a\x0b\xb1\x46\x58\x2a\x51\x74\x1f\x30\x71\x44\xf1\x31\x9e\x2d\x1e\x9c\x1b\x99\x7d\x9f\x61\x2f\xb1\x33\x19\xd5\xb2\x76\x86\x60\x72\x07\xcd\x73\xa7\x4b\xbe\xd6\xd1\xff\x0b\x00\x00\xff\xff\xb2\x52\x6d\x74\x77\x20\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/api.proto"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}

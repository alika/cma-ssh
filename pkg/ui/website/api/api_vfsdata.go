// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Api statically implements the virtual filesystem provided to vfsgen.
var Api = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 12, 13, 3, 12, 39, 917760310, time.UTC),
		},
		"/api.proto": &vfsgen۰CompressedFileInfo{
			name:             "api.proto",
			modTime:          time.Date(2018, 12, 13, 3, 12, 39, 911304673, time.UTC),
			uncompressedSize: 8776,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x39\x5b\x73\xdb\x36\xd6\xef\xfa\x15\x67\xf4\xf2\x39\xdf\x24\x62\xe2\xb4\xdd\x8e\xbd\xde\x5d\xad\xe4\x3a\x9a\xc6\x92\xc7\x94\xdb\xe9\x93\x06\x22\x8f\x48\xd4\x24\xc0\x05\x40\x29\x9a\x8e\xff\xfb\xce\x01\x40\x8a\xa4\x28\x3b\x4d\xd2\x87\xd5\x43\x62\xe1\x5c\x70\xee\x17\x28\x08\x60\x22\x8b\xbd\xe2\x49\x6a\xe0\xfc\xed\xbb\x1f\x21\x64\xb9\x2e\x45\x02\xe1\x34\x84\x49\x26\xcb\x18\xe6\xcc\xf0\x2d\xc2\x44\xe6\x45\x69\xb8\x48\x60\x89\x2c\x07\x56\x9a\x54\x2a\x3d\x1a\x04\xc1\x20\x08\xe0\x23\x8f\x50\x68\x8c\xa1\x14\x31\x2a\x30\x29\xc2\xb8\x60\x51\x8a\x15\xe4\x35\xfc\x82\x4a\x73\x29\xe0\x7c\xf4\x16\xce\x08\x61\xe8\x41\xc3\x57\x97\xc4\x62\x2f\x4b\xc8\xd9\x1e\x84\x34\x50\x6a\x04\x93\x72\x0d\x1b\x9e\x21\xe0\xa7\x08\x0b\x03\x5c\x40\x24\xf3\x22\xe3\x4c\x44\x08\x3b\x6e\x52\x7b\x8f\xe7\x42\x92\xc0\x6f\x9e\x87\x5c\x1b\xc6\x05\x30\x88\x64\xb1\x07\xb9\x69\x22\x02\x33\x5e\x68\xfa\xa4\xc6\x14\x17\x41\xb0\xdb\xed\x46\xcc\x0a\x3c\x92\x2a\x09\x32\x87\xaa\x83\x8f\xb3\xc9\xf5\x3c\xbc\x7e\x73\x3e\x7a\xeb\x89\x1e\x44\x86\x5a\x83\xc2\xff\x94\x5c\x61\x0c\xeb\x3d\xb0\xa2\xc8\x78\xc4\xd6\x19\x42\xc6\x76\x20\x15\xb0\x44\x21\xc6\x60\x24\x09\xbd\x53\x9c\xec\xf6\x1a\xb4\xdc\x98\x1d\x53\x48\x6c\x62\xae\x8d\xe2\xeb\xd2\xb4\x6c\x56\x89\xc8\x75\x0b\x41\x0a\x60\x02\x86\xe3\x10\x66\xe1\x10\xfe\x3d\x0e\x67\xe1\x6b\x62\xf2\xeb\x6c\xf9\x61\xf1\xb0\x84\x5f\xc7\xf7\xf7\xe3\xf9\x72\x76\x1d\xc2\xe2\x1e\x26\x8b\xf9\x74\xb6\x9c\x2d\xe6\x21\x2c\x7e\x82\xf1\xfc\x37\xf8\x79\x36\x9f\xbe\x06\xe4\x26\x45\x05\xf8\xa9\x50\xa4\x81\x54\xc0\xc9\x9a\x18\x5b\xd3\x85\x88\x2d\x11\x36\xd2\x89\xa4\x0b\x8c\xf8\x86\x47\x90\x31\x91\x94\x2c\x41\x48\xe4\x16\x95\xa0\x48\x28\x50\xe5\x5c\x93\x57\x35\x30\x11\x13\x9b\x8c\xe7\xdc\x30\x63\x8f\x8e\xf4\x1a\x0d\xec\x4d\x3e\xc4\x26\xf3\xc9\x12\xfe\x9e\x33\xc5\x8c\xe4\xf1\xbf\x92\x9c\xf1\x6c\x14\xc9\xfc\x1f\x83\x81\xde\x0b\xc3\x3e\xc1\x15\x0c\x0b\x25\x8d\x7c\x3f\xbc\x1c\x0c\x0a\x16\x3d\xd2\xf5\x51\xce\xb4\x4e\x2f\x07\x03\x9e\x17\x52\x19\x18\x26\x52\x26\x19\x06\xac\xe0\x01\x13\x42\xfa\xdb\x47\x96\x72\x78\x59\xa3\xd9\xef\xd1\x9b\x04\xc5\x1b\xbd\x63\x49\x82\x2a\x90\x85\x45\xed\x25\x1b\x0c\x1c\x14\xce\x12\x55\x44\xa3\x84\x19\xdc\xb1\xbd\x03\x47\xab\x04\xc5\xca\x73\x19\x79\x2e\x23\x59\xa0\x60\x05\xdf\x9e\x57\x90\x57\x70\x05\x7f\x0c\x00\xb8\xd8\xc8\x0b\xfb\x17\x80\xe1\x26\xc3\x0b\x18\x4e\xb2\x52\x1b\x54\x70\xcb\x04\x4b\x50\xc1\xf8\x6e\x06\x61\xf8\x01\x0a\x25\xb7\x3c\x46\x35\xbc\xb4\xe8\x5b\x97\x34\x17\x30\xdc\xbe\x1d\xbd\x1b\xbd\xf5\xc7\x91\x14\x86\x45\xa6\x62\x4a\x1f\xc1\x72\xe2\x7b\x4b\xe6\x84\x1b\xa6\xd8\xa6\x34\x31\x17\x72\xeb\x49\xe8\x53\xaa\xec\x02\x86\x14\xf2\xfa\x22\x08\x12\x6e\xd2\x72\x4d\x16\x0f\xb4\x73\xc9\x9b\x48\x44\x26\x88\x72\xf6\x46\xeb\xb4\x41\x87\xe4\x9a\x0b\x18\x1e\xfb\xca\x23\x3d\xd1\x7f\xf6\x1f\xfc\x64\x50\x09\x96\xad\x62\x19\xe9\x4a\xbe\x2f\xb9\x37\x46\x1d\x29\x6e\x4d\x4b\x6a\x49\x85\xc0\xd6\xb2\x34\xf0\x59\x96\x7b\x1a\x00\xe8\x28\xc5\x1c\xf5\x05\x7c\x58\x2e\xef\xc2\xcb\xee\x09\x1d\x44\x52\xe8\xd2\x9e\x0c\x7d\x12\xd3\x7d\xc1\xef\x5a\x0a\xcb\xa6\x50\x32\x2e\xa3\x53\xf0\xa7\xcb\xc1\x40\xa3\xda\xf2\x08\x6b\xa9\x9c\xc2\x94\x9b\x3c\xcb\x9c\x4c\xb6\xea\x31\x88\x1c\x86\x85\xab\x22\x82\x89\x42\x66\xb0\xa2\x3b\x6b\x7d\xbd\xd5\xc9\x2b\x50\x68\x4a\x25\x74\x07\x74\x8f\x45\xb6\x7f\xd5\x70\x7c\x1d\xa6\x36\x0d\x46\xac\xe0\x23\xb2\x74\x15\x7c\x87\x4f\x21\xb5\x81\x0b\x18\xda\x4c\xd9\xbe\x0b\xbc\x40\xc3\x16\xd2\x5a\xc6\x7b\x42\xfa\xff\xc3\xf1\x93\xf7\x71\x4b\x33\x85\x46\x71\xdc\xba\x9a\xa1\x0d\x33\xa5\xa6\x3a\x5b\xab\x49\xf5\x00\xb8\xd1\xf0\x58\xae\x31\x92\x62\xc3\x13\x5b\x52\x22\x29\x04\x46\x86\x6f\xb9\xd9\xd7\xa6\xb8\x41\x53\xdb\xe1\xf0\x77\xdb\x08\x87\xf3\x2f\xb7\x40\x82\xcf\x1b\xa0\x57\xd3\x18\x33\x34\xd8\xe3\xc0\xa9\x05\xd4\x82\xb7\xbe\xb6\x65\x6f\x81\xbe\x5c\x7c\x2f\xc9\x9f\xd6\xa0\xf6\x15\x83\x8c\x6b\x43\x7e\xf2\x84\xba\xc7\x05\x1f\x09\xe5\xac\xfd\xfd\x94\x2b\x08\xf6\xad\xdd\x11\x90\x8c\x2f\x6b\x54\x2a\x51\x55\x47\x5b\x60\x55\x6e\x73\xd3\x17\x09\x56\x70\xa0\xd4\x6c\xb8\xeb\x06\x8d\x1f\x41\x66\x0d\xf4\xb3\xc3\xf1\x91\x92\xfe\xfc\x9b\x29\xe8\xc5\x7d\x41\x37\x16\xff\x5e\x6a\x03\xec\xd9\xe2\x31\xb6\x48\xde\x0b\x73\x19\xa3\x86\xb3\xd6\x59\x5b\x99\x16\xe8\x2b\x2a\x48\xf9\x4d\x0b\x08\xb9\xb0\x2c\x12\xc5\x62\xf4\x32\x68\x5b\x23\x18\x24\x7c\x8b\xe2\x48\xe9\x1b\x34\x0f\x0e\xdd\x6b\xd2\x75\xe4\x49\xe8\x91\x6b\x4f\x62\x7e\xf3\x68\xf6\x0a\xbe\xe4\x74\x63\x30\x2f\x0c\x4d\x8c\x95\x45\x8e\x9d\xde\x16\x1a\xce\xda\xdf\xdb\x3a\xb6\x61\xdf\xda\xe5\xc7\x5a\xbd\xe4\xfa\xa7\xc1\x00\x45\x99\x57\x7d\x32\x74\x1d\xa3\xee\x96\x73\x69\x40\xa3\xb1\x5f\xc3\xe5\x78\xf9\x10\xae\x1e\xe6\xe1\xdd\xf5\x64\xf6\xd3\xec\x7a\x0a\x57\xf0\xf6\xb2\x42\x5d\xa6\x08\x77\xf7\x8b\x5f\x66\xe1\x6c\x31\x9f\xcd\x6f\x6c\xf7\x41\xe0\x22\xa6\xf6\x8c\xda\x76\xa4\xaa\x0b\x71\x0d\x6b\xa4\x51\x35\xb2\x3d\x34\x1e\x59\x2e\x2d\xf2\x2b\x78\xd7\xe2\x7d\xff\x30\x7f\x91\x6d\xca\x88\x2f\x85\xa8\x63\xeb\xba\x9d\x86\x4d\x99\x65\x7b\x28\x35\xed\x02\xee\xaa\x8a\xdb\x15\x9c\xb7\x6f\xb9\x9e\x2c\xe6\x93\xd9\xc7\xfe\x9b\x98\x01\x2d\x73\x84\x9d\x54\x8f\xc4\x97\x51\xc7\xc4\x6c\xef\x95\x89\xa5\x40\x5a\x0a\x1a\x22\xbd\x06\x5d\x46\x29\x30\xed\xe3\x87\xd0\x08\x9c\x33\x2b\xb0\x54\x20\x64\x8c\xf5\x0a\xe2\x85\x6b\x08\x71\x05\xef\x5b\x02\x86\xcb\xc5\xdd\xdd\x67\x9b\xd7\xb5\xa6\xd8\xfb\xcf\x53\x5e\xc1\x77\x2d\x96\xd7\xf7\xf7\x8b\xfb\x67\xf9\xd1\xee\xb6\x46\x28\x85\x33\xa1\x25\x76\x54\x57\xf0\x7d\x8b\xd7\xf4\xfa\xe6\x7e\x3c\xbd\x9e\x3e\xcb\xce\x2f\x69\x9a\xf6\x49\x65\x8d\x48\x46\x93\xa0\x50\x1b\x1a\x28\xc9\x5d\xb0\x29\x85\x05\xb0\xac\x1a\x49\x6a\xde\x57\xf0\xc3\x25\x45\x6e\x8e\x5a\xd3\xea\xd1\x9d\xd1\x1a\xf1\xcb\x72\xac\xf6\xcc\xea\x76\x23\x49\x97\xba\x8a\x7b\xeb\xd0\x56\x27\x12\x3b\xae\x1f\x85\x5e\xd5\xcf\xe4\x06\x7e\x2e\xd7\xa8\x04\x92\x46\x54\x12\x29\x10\xd0\xf9\x50\x8f\x60\x22\x85\x51\x32\x83\x22\x63\xa2\xa6\xd2\xc0\x14\x42\x8c\x86\x96\x32\xe1\x36\x53\x12\xe7\x96\x45\x29\x17\x18\x16\x18\x8d\x9a\x12\x3c\xfe\xa8\x57\xd5\x85\xcd\xe8\xfc\x35\x45\xbb\x27\xda\x90\x31\x5d\x77\x7f\x18\x0f\x5c\xaa\xcb\x0c\x52\x9e\xa4\x2b\xb6\x65\x3c\x63\x6b\x4e\xd6\x3b\x0a\xa2\x0d\x5b\x2b\x1e\x79\x4b\x94\xba\x63\x02\x34\xa4\xd6\xca\x23\x35\xa3\xc5\xcb\xac\x61\x97\xf2\x28\xb5\x6b\xbf\xe2\x1a\x9b\xc2\xb8\xaa\x88\x85\xcb\xbf\x50\xa7\x0d\x3d\xed\x7e\xa4\x64\xb6\xb2\x06\x5a\x59\xab\xb5\x22\xe8\x6b\xf9\x3b\x77\xd4\x8c\x7f\x68\x28\xcd\x35\xe8\x54\x96\x59\x4c\x2a\x33\xd8\xb2\xac\x44\xc8\xf8\x23\x02\x2f\x2e\xec\x26\x6a\xd3\x7b\x47\x55\xdf\x61\x70\x65\x4a\x96\xc1\xec\x2e\x20\x70\xc5\xe9\x8e\x69\x4d\x4e\x64\xd1\x23\xd9\xaf\xda\xab\x20\x2a\xb5\x91\x39\x2a\xed\xad\x6a\x9f\x1d\x8c\x24\x1d\xf2\x52\xd8\x24\xa0\xaf\x5d\x4d\xbc\xcd\x59\xc1\x57\x28\xe2\x42\x72\x61\xe0\x0a\xfe\x56\x0b\x7e\xa7\xf8\x96\x48\x1f\x71\x6f\x1d\x45\x3c\xb4\x4e\x81\x0b\x23\x21\xf7\xe6\x6a\x72\x2a\x1c\xc1\x8a\x08\xae\xe0\xc7\xd3\x79\x62\x7b\x4f\x63\x2f\x3a\x1d\x5e\x3b\xa6\x9b\xe9\xe2\x02\x98\xbb\xb7\x16\xd4\xe6\x10\x78\xf2\xf1\x28\x75\x62\x34\x8c\x67\xba\x9b\x83\x9e\x94\x32\xbe\x90\x42\xbb\x8a\x52\x75\x7d\x83\x79\x8d\x68\x33\xa0\xa1\x42\x6b\x0d\xf9\x9c\x3c\xcf\xa4\x7c\xc4\x18\xca\xa2\x3f\xcb\x7b\x59\x77\x4c\x33\xeb\x14\x57\x57\xe0\xf5\x5e\x1b\xcc\x8f\x95\x6f\xaa\x32\xb5\xda\x3f\xab\x50\x77\x3d\x69\x7a\x84\x19\x4a\xed\xc6\xdd\xff\xa7\x9d\xe8\x46\xd2\x1e\x6e\x94\xdc\xbf\xa8\xd5\xf1\x8e\x73\xb8\x61\x62\xf3\xa1\xa9\xdb\x1a\x2b\xc6\xbe\x26\xf4\xf9\x35\xac\xd7\x4a\x22\x6d\x46\x81\x17\xc4\xef\x9d\xa7\x7d\xe7\x77\x17\xf8\xe3\x34\xf8\xab\x7c\xe0\x89\x3e\xf6\x6e\x55\x55\xed\xe8\x09\xb7\x63\x99\x9b\x48\x07\x61\xa6\x9d\x58\x6b\x2a\xcf\xe3\x96\x0c\x3d\x91\xd9\xe3\xb3\x43\x99\x1f\xc7\x31\x77\x6d\xaf\x67\x7d\x6a\x2f\xf5\x27\x58\x3a\x84\x55\xa5\x41\xb7\xf6\x9f\xa6\x6f\xcf\x80\xb5\x13\xbf\xeb\x33\x48\x23\xb2\xff\xf7\xcd\xd2\xcc\xb4\xc6\xbb\x88\xad\xde\xf6\x59\xe4\x99\xca\xdd\xc0\xef\xce\x55\x7f\xda\xd2\xdf\xb7\x2c\x7d\x18\x35\x3e\xb2\x35\x66\x07\x3b\x13\x6f\xe1\xed\xc7\x20\x23\xe0\xcb\x23\x8c\xed\x77\xfd\x04\x0e\x56\x45\x7e\x25\xbc\x7f\x5f\x76\x76\x76\xeb\x5f\xfd\xe6\x4c\x0d\xb6\x96\xb3\xd3\x83\x5b\x62\xd2\x80\x67\xe5\x21\x06\x61\xf8\x01\x58\x14\xa1\x6e\x35\xac\x1a\xa5\x2b\x72\x2a\xb5\x79\x86\xce\x82\xbb\xe3\xbb\x6d\xe4\x3d\x34\x5c\x98\xf7\xe7\x0e\xda\xcd\x87\x82\x69\xbd\x93\x2a\xee\x90\x8d\xdc\xcc\xc0\xb5\x6d\x87\x3c\x2f\x32\xcc\x51\x50\xdd\xd8\x71\x93\xf2\xd6\x90\xcf\x0a\x5e\x71\x5c\x63\xc4\x4a\xed\x7e\x06\xa1\xd0\x7c\x14\x72\x27\x56\x56\x56\x5d\x16\x56\x00\x06\xb7\xb3\xe5\x2d\x44\x4c\xd8\xdd\xd4\x34\x64\x18\xc1\xd8\x01\xb9\xae\x18\x6a\x63\xf7\x50\x6a\xc0\xeb\x0c\x73\x2b\x25\xf5\xf6\x35\xa3\x69\x80\x95\x26\x45\x61\xbc\x9b\x2e\x01\x69\x3f\xe7\x36\xe0\xf6\x10\x4b\x2b\xbb\xbf\xa4\x62\x48\xc4\x16\x4c\x02\x38\xee\x3c\x2f\x50\x69\x29\xec\x8c\x62\x97\x13\xeb\xce\x11\x2c\x17\xd3\xc5\xc5\x41\xf9\x86\x36\xba\x35\xb3\xd6\x36\xec\xa6\x80\x8d\x35\x5d\xff\x68\xd1\x1a\x58\xea\x42\xdc\x0d\x74\x4f\x54\xe5\x03\x45\xe4\x0d\x9a\xe6\x14\x6e\xdf\x96\xdd\x33\x52\xa3\x7b\x1c\xde\x8b\x5c\x63\x09\x02\x70\x5d\x84\xae\xaf\xa8\xab\x76\x75\x4c\xd7\xed\x38\x1b\x90\x05\x2a\x17\xff\x34\x02\x2d\x7e\x3e\xd1\xec\x2b\x56\x3d\xcf\x58\x87\xa5\xdd\x1b\xc4\xb0\xa4\xda\x10\x13\x4e\xf3\x4f\x21\x35\x37\x52\xed\x6b\x44\x6f\xd2\x84\x9b\xc6\x1a\xf0\xee\xb2\xcb\x28\x65\x3a\xad\x4a\x0b\x71\xa2\x39\x93\x9b\x3e\x2e\x0e\x72\x48\x95\xd3\x03\x9f\x51\x88\x56\xd5\x28\x43\x26\x60\x97\xa2\x80\x75\xc9\xb3\x5e\xb6\x84\xbc\x72\x5b\x5e\x9d\x52\x9e\xf5\x94\x0e\xe5\xc6\xd2\xc6\x5d\x5a\x7b\xb8\x8a\x1d\xdd\x77\x2d\xba\x5f\x0e\x1e\x4e\x64\x3d\xee\xd2\x16\xc0\xfd\xd2\xd9\x94\x41\x36\xec\xf3\x7d\x8b\xcf\xc4\x51\xa8\xc3\x6a\xd3\xa0\x8b\x2a\x60\xbd\x1f\x54\xa3\x76\xc6\x0c\x79\x0e\xb8\x71\x46\x70\x88\xae\x30\x04\xa0\x4a\x61\x7f\x5c\x93\xa2\xcb\xb1\xa8\x08\xeb\xc1\xfd\x69\x30\xe8\xa8\xd4\x08\x0a\x0b\xea\x89\x15\xaf\xcd\xaa\xd9\xdf\x7a\x46\xa8\xe7\x1e\xd3\x9e\x1d\x1e\xfd\x82\x83\x76\x1f\x8d\xa4\xd0\x3c\x46\x2b\x3f\xe9\xe7\x1f\x8e\x3e\x67\x48\x7e\xfe\x8d\xae\x31\x5d\x32\xd1\x9d\x2d\xfd\x2d\xa7\x47\x4b\x2b\x76\x6b\x71\x2e\xa4\xd6\x9c\x76\x29\xf7\x63\xb8\x90\xbb\x76\xf1\xa8\x7a\x58\x45\xd3\xb5\xd8\xd1\x63\xdc\x5f\x64\xa3\x1e\x05\x2c\x93\x1d\x36\x5f\x7e\xe4\x3f\x5b\x8d\xb7\xb9\xe6\x9f\x94\xb9\xbb\xa8\x31\xed\xd6\x2f\x06\xba\xb4\xad\x6a\x53\x66\xa7\x77\xb1\x06\xdb\xee\x43\xf4\x5f\x6b\x89\xce\x2e\xbf\xa3\xca\x22\xec\x24\xc5\xe2\xb8\x6f\xa0\x3a\xb5\xd4\xb3\x38\xae\x37\xfa\xf3\xcf\x60\xaf\x30\x97\x5b\x84\x8d\x92\xf9\xb3\x77\xdc\x5b\xbc\xe6\x4d\x8e\xb2\xbe\xec\x7d\xa7\xbe\xf7\xd2\x1c\x55\xf8\x53\x63\xcb\xf1\xe8\xf2\xae\x2e\x16\xa7\x9c\xf4\xb5\xae\xff\x6f\x00\x00\x00\xff\xff\xa0\xd7\xa4\x81\x48\x22\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/api.proto"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
